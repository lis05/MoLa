State 66 conflicts: 2 shift/reduce
State 70 conflicts: 1 shift/reduce
State 103 conflicts: 1 shift/reduce
State 166 conflicts: 2 shift/reduce
State 167 conflicts: 1 shift/reduce
State 170 conflicts: 1 shift/reduce
State 186 conflicts: 2 shift/reduce
State 187 conflicts: 2 shift/reduce
State 188 conflicts: 2 shift/reduce
State 189 conflicts: 2 shift/reduce
State 230 conflicts: 1 shift/reduce
State 231 conflicts: 24 shift/reduce
State 253 conflicts: 1 shift/reduce
State 254 conflicts: 1 shift/reduce
State 255 conflicts: 1 shift/reduce
State 256 conflicts: 24 shift/reduce
State 257 conflicts: 1 shift/reduce
State 258 conflicts: 24 shift/reduce
State 273 conflicts: 1 shift/reduce
State 274 conflicts: 1 shift/reduce
State 275 conflicts: 1 shift/reduce
State 276 conflicts: 24 shift/reduce
State 284 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program import_stmt
    2        | program export_stmt
    3        | program global_variable_stmt
    4        | program function_stmt
    5        | program type_stmt
    6        | program method_stmt
    7        | program constructor_stmt
    8        | program destructor_stmt
    9        | program stmt
   10        | Îµ

   11 import_stmt: IMPORT module_path AS IDENTIFIER

   12 module_path: module_path_upwards module_path_compact
   13            | module_path_compact
   14            | STRING

   15 module_path_upwards: '^' module_path_upwards
   16                    | '^'

   17 module_path_compact: IDENTIFIER '.' module_path_compact
   18                    | IDENTIFIER

   19 export_stmt: EXPORT export_item_list

   20 export_item_list: export_item ',' export_item_list
   21                 | export_item

   22 export_item: expr AS IDENTIFIER

   23 global_variable_stmt: GLOBAL identifier_item_list

   24 identifier_item_list: IDENTIFIER ',' identifier_item_list
   25                     | IDENTIFIER

   26 function_stmt: FUNCTION IDENTIFIER '(' parameter_list ')' block_stmt
   27              | FUNCTION IDENTIFIER '(' ')' block_stmt

   28 parameter_list: parameter_item ',' parameter_list
   29               | parameter_item

   30 parameter_item: COPY IDENTIFIER
   31               | REF IDENTIFIER
   32               | PASS IDENTIFIER
   33               | IDENTIFIER

   34 type_stmt: TYPE IDENTIFIER '{' member_list '}'

   35 member_list: member_item ',' member_list
   36            | member_item

   37 member_item: IDENTIFIER '(' ')'
   38            | IDENTIFIER

   39 method_stmt: METHOD IDENTIFIER '(' parameter_list ')' OF IDENTIFIER block_stmt
   40            | METHOD IDENTIFIER '(' ')' OF IDENTIFIER block_stmt

   41 constructor_stmt: CONSTRUCTOR '(' parameter_list ')' OF IDENTIFIER block_stmt
   42                 | CONSTRUCTOR '(' ')' OF IDENTIFIER block_stmt

   43 destructor_stmt: DESTRUCTOR OF IDENTIFIER block_stmt

   44 stmt: expr
   45     | block_stmt
   46     | while_stmt
   47     | for_stmt
   48     | if_stmt
   49     | continue_stmt
   50     | break_stmt
   51     | return_stmt
   52     | assignment_stmt
   53     | try_catch_stmt
   54     | signal_stmt
   55     | var_stmt
   56     | stmt ';'

   57 block_stmt: '{' stmt_list '}'
   58           | '{' '}'

   59 stmt_list: stmt stmt_list
   60          | stmt

   61 while_stmt: WHILE expr stmt

   62 for_stmt: FOR stmt ';' expr ';' expr stmt
   63         | FOR ';' expr ';' expr stmt
   64         | FOR stmt ';' ';' expr stmt
   65         | FOR stmt ';' expr ';' stmt
   66         | FOR ';' ';' expr stmt
   67         | FOR ';' expr ';' stmt
   68         | FOR stmt ';' ';' stmt
   69         | FOR ';' ';' stmt

   70 if_stmt: IF expr stmt ELSE stmt
   71        | IF expr stmt

   72 continue_stmt: CONTINUE

   73 break_stmt: BREAK

   74 return_stmt: RETURN COPY expr
   75            | RETURN REF expr
   76            | RETURN PASS expr
   77            | RETURN expr

   78 assignment_stmt: expr COPIES expr
   79                | expr REFS expr

   80 try_catch_stmt: TRY block_stmt catch_item_list FINALLY CATCH AS IDENTIFIER block_stmt
   81               | TRY block_stmt FINALLY CATCH AS IDENTIFIER block_stmt
   82               | TRY block_stmt catch_item_list

   83 catch_item_list: catch_item catch_item_list
   84                | catch_item

   85 catch_item: CATCH expr AS IDENTIFIER block_stmt

   86 signal_stmt: SIGNAL expr BECAUSE expr

   87 var_stmt: VAR assignment_item_list

   88 assignment_item_list: assignment_item ',' assignment_item_list
   89                     | assignment_item

   90 assignment_item: IDENTIFIER '=' expr
   91                | IDENTIFIER

   92 expr: assignment

   93 assignment: inline_if '=' assignment
   94           | inline_if

   95 inline_if: WHEN new THEN new ELSE new
   96          | new

   97 new: NEW logical_or '(' expr_list ')'
   98    | NEW logical_or
   99    | logical_or

  100 logical_or: logical_or OR logical_and
  101           | logical_and

  102 logical_and: logical_and AND bitwise_or
  103            | bitwise_or

  104 bitwise_or: bitwise_or '|' bitwise_xor
  105           | bitwise_xor

  106 bitwise_xor: bitwise_xor '^' bitwise_and
  107            | bitwise_and

  108 bitwise_and: bitwise_and '&' equality
  109            | equality

  110 equality: equality EQ relational
  111         | equality NE relational
  112         | relational

  113 relational: relational LE sum
  114           | relational GE sum
  115           | relational '<' sum
  116           | relational '>' sum
  117           | sum

  118 sum: sum '+' bitwise_shift
  119    | sum '-' bitwise_shift
  120    | bitwise_shift

  121 bitwise_shift: bitwise_shift LSHIFT term
  122              | bitwise_shift RSHIFT term
  123              | term

  124 term: term '*' prefix_op
  125     | term '/' prefix_op
  126     | term '%' prefix_op
  127     | prefix_op

  128 prefix_op: '+' prefix_op
  129          | '-' prefix_op
  130          | NOT prefix_op
  131          | '~' prefix_op
  132          | primary

  133 primary: primary '(' expr_list ')'
  134        | primary '(' ')'
  135        | primary '[' expr ']'
  136        | primary '.' IDENTIFIER
  137        | primary ':' IDENTIFIER
  138        | elementary

  139 elementary: '(' expr ')'
  140           | literal

  141 literal: NULLV
  142        | BOOL
  143        | CHAR
  144        | INT
  145        | FLOAT
  146        | STRING
  147        | IDENTIFIER

  148 expr_list: expr ',' expr_list
  149          | expr


Terminals, with rules where they appear

    $end (0) 0
    '%' <num> (37) 126
    '&' (38) 108
    '(' <num> (40) 26 27 37 39 40 41 42 97 133 134 139
    ')' <num> (41) 26 27 37 39 40 41 42 97 133 134 139
    '*' <num> (42) 124
    '+' <num> (43) 118 128
    ',' (44) 20 24 28 35 88 148
    '-' <num> (45) 119 129
    '.' (46) 17 136
    '/' <num> (47) 125
    ':' (58) 137
    ';' (59) 56 62 63 64 65 66 67 68 69
    '<' (60) 115
    '=' (61) 90 93
    '>' (62) 116
    '[' (91) 135
    ']' (93) 135
    '^' <num> (94) 15 16 106
    '{' <num> (123) 34 57 58
    '|' (124) 104
    '}' <num> (125) 34 57 58
    '~' <num> (126) 131
    error (256)
    BOOL <node> (258) 142
    CHAR <node> (259) 143
    INT <node> (260) 144
    FLOAT <node> (261) 145
    STRING <node> (262) 14 146
    IDENTIFIER <node> (263) 11 17 18 22 24 25 26 27 30 31 32 33 34 37 38 39 40 41 42 43 80 81 85 90 91 136 137 147
    NULLV <node> (264) 141
    IMPORT <num> (265) 11
    EXPORT <num> (266) 19
    GLOBAL <num> (267) 23
    FUNCTION <num> (268) 26 27
    TYPE <num> (269) 34
    METHOD <num> (270) 39 40
    CONSTRUCTOR <num> (271) 41 42
    DESTRUCTOR <num> (272) 43
    OF <num> (273) 39 40 41 42 43
    COPY <num> (274) 30 74
    REF <num> (275) 31 75
    PASS <num> (276) 32 76
    CONTINUE <num> (277) 72
    BREAK <num> (278) 73
    RETURN <num> (279) 74 75 76 77
    VAR <num> (280) 87
    TRY <num> (281) 80 81 82
    CATCH <num> (282) 80 81 85
    FINALLY <num> (283) 80 81
    SIGNAL <num> (284) 86
    BECAUSE <num> (285) 86
    IF <num> (286) 70 71
    ELSE <num> (287) 70 95
    WHILE <num> (288) 61
    FOR <num> (289) 62 63 64 65 66 67 68 69
    WHEN <num> (290) 95
    THEN <num> (291) 95
    NEW <num> (292) 97 98
    OR <num> (293) 100
    AND <num> (294) 102
    NOT <num> (295) 130
    COPIES <num> (296) 78
    REFS <num> (297) 79
    AS <num> (298) 11 22 80 81 85
    LSHIFT <num> (299) 121
    RSHIFT <num> (300) 122
    EQ <num> (301) 110
    NE <num> (302) 111
    LE <num> (303) 113
    GE <num> (304) 114


Nonterminals, with rules where they appear

    $accept (72)
        on left: 0
    program <node> (73)
        on left: 1 2 3 4 5 6 7 8 9 10
        on right: 0 1 2 3 4 5 6 7 8 9
    import_stmt <node> (74)
        on left: 11
        on right: 1
    module_path <node> (75)
        on left: 12 13 14
        on right: 11
    module_path_upwards <node> (76)
        on left: 15 16
        on right: 12 15
    module_path_compact <node> (77)
        on left: 17 18
        on right: 12 13 17
    export_stmt <node> (78)
        on left: 19
        on right: 2
    export_item_list <node> (79)
        on left: 20 21
        on right: 19 20
    export_item <node> (80)
        on left: 22
        on right: 20 21
    global_variable_stmt <node> (81)
        on left: 23
        on right: 3
    identifier_item_list <node> (82)
        on left: 24 25
        on right: 23 24
    function_stmt <node> (83)
        on left: 26 27
        on right: 4
    parameter_list <node> (84)
        on left: 28 29
        on right: 26 28 39 41
    parameter_item <node> (85)
        on left: 30 31 32 33
        on right: 28 29
    type_stmt <node> (86)
        on left: 34
        on right: 5
    member_list <node> (87)
        on left: 35 36
        on right: 34 35
    member_item <node> (88)
        on left: 37 38
        on right: 35 36
    method_stmt <node> (89)
        on left: 39 40
        on right: 6
    constructor_stmt <node> (90)
        on left: 41 42
        on right: 7
    destructor_stmt <node> (91)
        on left: 43
        on right: 8
    stmt <node> (92)
        on left: 44 45 46 47 48 49 50 51 52 53 54 55 56
        on right: 9 56 59 60 61 62 63 64 65 66 67 68 69 70 71
    block_stmt <node> (93)
        on left: 57 58
        on right: 26 27 39 40 41 42 43 45 80 81 82 85
    stmt_list <node> (94)
        on left: 59 60
        on right: 57 59
    while_stmt <node> (95)
        on left: 61
        on right: 46
    for_stmt <node> (96)
        on left: 62 63 64 65 66 67 68 69
        on right: 47
    if_stmt <node> (97)
        on left: 70 71
        on right: 48
    continue_stmt <node> (98)
        on left: 72
        on right: 49
    break_stmt <node> (99)
        on left: 73
        on right: 50
    return_stmt <node> (100)
        on left: 74 75 76 77
        on right: 51
    assignment_stmt <node> (101)
        on left: 78 79
        on right: 52
    try_catch_stmt <node> (102)
        on left: 80 81 82
        on right: 53
    catch_item_list <node> (103)
        on left: 83 84
        on right: 80 82 83
    catch_item <node> (104)
        on left: 85
        on right: 83 84
    signal_stmt <node> (105)
        on left: 86
        on right: 54
    var_stmt <node> (106)
        on left: 87
        on right: 55
    assignment_item_list <node> (107)
        on left: 88 89
        on right: 87 88
    assignment_item <node> (108)
        on left: 90 91
        on right: 88 89
    expr <node> (109)
        on left: 92
        on right: 22 44 61 62 63 64 65 66 67 70 71 74 75 76 77 78 79 85 86 90 135 139 148 149
    assignment <node> (110)
        on left: 93 94
        on right: 92 93
    inline_if <node> (111)
        on left: 95 96
        on right: 93 94
    new <node> (112)
        on left: 97 98 99
        on right: 95 96
    logical_or <node> (113)
        on left: 100 101
        on right: 97 98 99 100
    logical_and <node> (114)
        on left: 102 103
        on right: 100 101 102
    bitwise_or <node> (115)
        on left: 104 105
        on right: 102 103 104
    bitwise_xor <node> (116)
        on left: 106 107
        on right: 104 105 106
    bitwise_and <node> (117)
        on left: 108 109
        on right: 106 107 108
    equality <node> (118)
        on left: 110 111 112
        on right: 108 109 110 111
    relational <node> (119)
        on left: 113 114 115 116 117
        on right: 110 111 112 113 114 115 116
    sum <node> (120)
        on left: 118 119 120
        on right: 113 114 115 116 117 118 119
    bitwise_shift <node> (121)
        on left: 121 122 123
        on right: 118 119 120 121 122
    term <node> (122)
        on left: 124 125 126 127
        on right: 121 122 123 124 125 126
    prefix_op <node> (123)
        on left: 128 129 130 131 132
        on right: 124 125 126 127 128 129 130 131
    primary <node> (124)
        on left: 133 134 135 136 137 138
        on right: 132 133 134 135 136 137
    elementary <node> (125)
        on left: 139 140
        on right: 138
    literal <node> (126)
        on left: 141 142 143 144 145 146 147
        on right: 140
    expr_list <node> (127)
        on left: 148 149
        on right: 97 133 148


State 0

    0 $accept: â¢ program $end

    $default  reduce using rule 10 (program)

    program  go to state 1


State 1

    0 $accept: program â¢ $end
    1 program: program â¢ import_stmt
    2        | program â¢ export_stmt
    3        | program â¢ global_variable_stmt
    4        | program â¢ function_stmt
    5        | program â¢ type_stmt
    6        | program â¢ method_stmt
    7        | program â¢ constructor_stmt
    8        | program â¢ destructor_stmt
    9        | program â¢ stmt

    $end         shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    STRING       shift, and go to state 7
    IDENTIFIER   shift, and go to state 8
    NULLV        shift, and go to state 9
    IMPORT       shift, and go to state 10
    EXPORT       shift, and go to state 11
    GLOBAL       shift, and go to state 12
    FUNCTION     shift, and go to state 13
    TYPE         shift, and go to state 14
    METHOD       shift, and go to state 15
    CONSTRUCTOR  shift, and go to state 16
    DESTRUCTOR   shift, and go to state 17
    CONTINUE     shift, and go to state 18
    BREAK        shift, and go to state 19
    RETURN       shift, and go to state 20
    VAR          shift, and go to state 21
    TRY          shift, and go to state 22
    SIGNAL       shift, and go to state 23
    IF           shift, and go to state 24
    WHILE        shift, and go to state 25
    FOR          shift, and go to state 26
    WHEN         shift, and go to state 27
    NEW          shift, and go to state 28
    NOT          shift, and go to state 29
    '{'          shift, and go to state 30
    '+'          shift, and go to state 31
    '-'          shift, and go to state 32
    '~'          shift, and go to state 33
    '('          shift, and go to state 34

    import_stmt           go to state 35
    export_stmt           go to state 36
    global_variable_stmt  go to state 37
    function_stmt         go to state 38
    type_stmt             go to state 39
    method_stmt           go to state 40
    constructor_stmt      go to state 41
    destructor_stmt       go to state 42
    stmt                  go to state 43
    block_stmt            go to state 44
    while_stmt            go to state 45
    for_stmt              go to state 46
    if_stmt               go to state 47
    continue_stmt         go to state 48
    break_stmt            go to state 49
    return_stmt           go to state 50
    assignment_stmt       go to state 51
    try_catch_stmt        go to state 52
    signal_stmt           go to state 53
    var_stmt              go to state 54
    expr                  go to state 55
    assignment            go to state 56
    inline_if             go to state 57
    new                   go to state 58
    logical_or            go to state 59
    logical_and           go to state 60
    bitwise_or            go to state 61
    bitwise_xor           go to state 62
    bitwise_and           go to state 63
    equality              go to state 64
    relational            go to state 65
    sum                   go to state 66
    bitwise_shift         go to state 67
    term                  go to state 68
    prefix_op             go to state 69
    primary               go to state 70
    elementary            go to state 71
    literal               go to state 72


State 2

    0 $accept: program $end â¢

    $default  accept


State 3

  142 literal: BOOL â¢

    $default  reduce using rule 142 (literal)


State 4

  143 literal: CHAR â¢

    $default  reduce using rule 143 (literal)


State 5

  144 literal: INT â¢

    $default  reduce using rule 144 (literal)


State 6

  145 literal: FLOAT â¢

    $default  reduce using rule 145 (literal)


State 7

  146 literal: STRING â¢

    $default  reduce using rule 146 (literal)


State 8

  147 literal: IDENTIFIER â¢

    $default  reduce using rule 147 (literal)


State 9

  141 literal: NULLV â¢

    $default  reduce using rule 141 (literal)


State 10

   11 import_stmt: IMPORT â¢ module_path AS IDENTIFIER

    STRING      shift, and go to state 73
    IDENTIFIER  shift, and go to state 74
    '^'         shift, and go to state 75

    module_path          go to state 76
    module_path_upwards  go to state 77
    module_path_compact  go to state 78


State 11

   19 export_stmt: EXPORT â¢ export_item_list

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    export_item_list  go to state 79
    export_item       go to state 80
    expr              go to state 81
    assignment        go to state 56
    inline_if         go to state 57
    new               go to state 58
    logical_or        go to state 59
    logical_and       go to state 60
    bitwise_or        go to state 61
    bitwise_xor       go to state 62
    bitwise_and       go to state 63
    equality          go to state 64
    relational        go to state 65
    sum               go to state 66
    bitwise_shift     go to state 67
    term              go to state 68
    prefix_op         go to state 69
    primary           go to state 70
    elementary        go to state 71
    literal           go to state 72


State 12

   23 global_variable_stmt: GLOBAL â¢ identifier_item_list

    IDENTIFIER  shift, and go to state 82

    identifier_item_list  go to state 83


State 13

   26 function_stmt: FUNCTION â¢ IDENTIFIER '(' parameter_list ')' block_stmt
   27              | FUNCTION â¢ IDENTIFIER '(' ')' block_stmt

    IDENTIFIER  shift, and go to state 84


State 14

   34 type_stmt: TYPE â¢ IDENTIFIER '{' member_list '}'

    IDENTIFIER  shift, and go to state 85


State 15

   39 method_stmt: METHOD â¢ IDENTIFIER '(' parameter_list ')' OF IDENTIFIER block_stmt
   40            | METHOD â¢ IDENTIFIER '(' ')' OF IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 86


State 16

   41 constructor_stmt: CONSTRUCTOR â¢ '(' parameter_list ')' OF IDENTIFIER block_stmt
   42                 | CONSTRUCTOR â¢ '(' ')' OF IDENTIFIER block_stmt

    '('  shift, and go to state 87


State 17

   43 destructor_stmt: DESTRUCTOR â¢ OF IDENTIFIER block_stmt

    OF  shift, and go to state 88


State 18

   72 continue_stmt: CONTINUE â¢

    $default  reduce using rule 72 (continue_stmt)


State 19

   73 break_stmt: BREAK â¢

    $default  reduce using rule 73 (break_stmt)


State 20

   74 return_stmt: RETURN â¢ COPY expr
   75            | RETURN â¢ REF expr
   76            | RETURN â¢ PASS expr
   77            | RETURN â¢ expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    COPY        shift, and go to state 89
    REF         shift, and go to state 90
    PASS        shift, and go to state 91
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 92
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 21

   87 var_stmt: VAR â¢ assignment_item_list

    IDENTIFIER  shift, and go to state 93

    assignment_item_list  go to state 94
    assignment_item       go to state 95


State 22

   80 try_catch_stmt: TRY â¢ block_stmt catch_item_list FINALLY CATCH AS IDENTIFIER block_stmt
   81               | TRY â¢ block_stmt FINALLY CATCH AS IDENTIFIER block_stmt
   82               | TRY â¢ block_stmt catch_item_list

    '{'  shift, and go to state 30

    block_stmt  go to state 96


State 23

   86 signal_stmt: SIGNAL â¢ expr BECAUSE expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 97
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 24

   70 if_stmt: IF â¢ expr stmt ELSE stmt
   71        | IF â¢ expr stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 98
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 25

   61 while_stmt: WHILE â¢ expr stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 99
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 26

   62 for_stmt: FOR â¢ stmt ';' expr ';' expr stmt
   63         | FOR â¢ ';' expr ';' expr stmt
   64         | FOR â¢ stmt ';' ';' expr stmt
   65         | FOR â¢ stmt ';' expr ';' stmt
   66         | FOR â¢ ';' ';' expr stmt
   67         | FOR â¢ ';' expr ';' stmt
   68         | FOR â¢ stmt ';' ';' stmt
   69         | FOR â¢ ';' ';' stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34
    ';'         shift, and go to state 100

    stmt             go to state 101
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 27

   95 inline_if: WHEN â¢ new THEN new ELSE new

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    new            go to state 102
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 28

   97 new: NEW â¢ logical_or '(' expr_list ')'
   98    | NEW â¢ logical_or

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    logical_or     go to state 103
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 29

  130 prefix_op: NOT â¢ prefix_op

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    prefix_op   go to state 104
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 30

   57 block_stmt: '{' â¢ stmt_list '}'
   58           | '{' â¢ '}'

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '}'         shift, and go to state 105
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    stmt             go to state 106
    block_stmt       go to state 44
    stmt_list        go to state 107
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 31

  128 prefix_op: '+' â¢ prefix_op

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    prefix_op   go to state 108
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 32

  129 prefix_op: '-' â¢ prefix_op

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    prefix_op   go to state 109
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 33

  131 prefix_op: '~' â¢ prefix_op

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    prefix_op   go to state 110
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 34

  139 elementary: '(' â¢ expr ')'

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 111
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 35

    1 program: program import_stmt â¢

    $default  reduce using rule 1 (program)


State 36

    2 program: program export_stmt â¢

    $default  reduce using rule 2 (program)


State 37

    3 program: program global_variable_stmt â¢

    $default  reduce using rule 3 (program)


State 38

    4 program: program function_stmt â¢

    $default  reduce using rule 4 (program)


State 39

    5 program: program type_stmt â¢

    $default  reduce using rule 5 (program)


State 40

    6 program: program method_stmt â¢

    $default  reduce using rule 6 (program)


State 41

    7 program: program constructor_stmt â¢

    $default  reduce using rule 7 (program)


State 42

    8 program: program destructor_stmt â¢

    $default  reduce using rule 8 (program)


State 43

    9 program: program stmt â¢
   56 stmt: stmt â¢ ';'

    ';'  shift, and go to state 112

    $default  reduce using rule 9 (program)


State 44

   45 stmt: block_stmt â¢

    $default  reduce using rule 45 (stmt)


State 45

   46 stmt: while_stmt â¢

    $default  reduce using rule 46 (stmt)


State 46

   47 stmt: for_stmt â¢

    $default  reduce using rule 47 (stmt)


State 47

   48 stmt: if_stmt â¢

    $default  reduce using rule 48 (stmt)


State 48

   49 stmt: continue_stmt â¢

    $default  reduce using rule 49 (stmt)


State 49

   50 stmt: break_stmt â¢

    $default  reduce using rule 50 (stmt)


State 50

   51 stmt: return_stmt â¢

    $default  reduce using rule 51 (stmt)


State 51

   52 stmt: assignment_stmt â¢

    $default  reduce using rule 52 (stmt)


State 52

   53 stmt: try_catch_stmt â¢

    $default  reduce using rule 53 (stmt)


State 53

   54 stmt: signal_stmt â¢

    $default  reduce using rule 54 (stmt)


State 54

   55 stmt: var_stmt â¢

    $default  reduce using rule 55 (stmt)


State 55

   44 stmt: expr â¢
   78 assignment_stmt: expr â¢ COPIES expr
   79                | expr â¢ REFS expr

    COPIES  shift, and go to state 113
    REFS    shift, and go to state 114

    $default  reduce using rule 44 (stmt)


State 56

   92 expr: assignment â¢

    $default  reduce using rule 92 (expr)


State 57

   93 assignment: inline_if â¢ '=' assignment
   94           | inline_if â¢

    '='  shift, and go to state 115

    $default  reduce using rule 94 (assignment)


State 58

   96 inline_if: new â¢

    $default  reduce using rule 96 (inline_if)


State 59

   99 new: logical_or â¢
  100 logical_or: logical_or â¢ OR logical_and

    OR  shift, and go to state 116

    $default  reduce using rule 99 (new)


State 60

  101 logical_or: logical_and â¢
  102 logical_and: logical_and â¢ AND bitwise_or

    AND  shift, and go to state 117

    $default  reduce using rule 101 (logical_or)


State 61

  103 logical_and: bitwise_or â¢
  104 bitwise_or: bitwise_or â¢ '|' bitwise_xor

    '|'  shift, and go to state 118

    $default  reduce using rule 103 (logical_and)


State 62

  105 bitwise_or: bitwise_xor â¢
  106 bitwise_xor: bitwise_xor â¢ '^' bitwise_and

    '^'  shift, and go to state 119

    $default  reduce using rule 105 (bitwise_or)


State 63

  107 bitwise_xor: bitwise_and â¢
  108 bitwise_and: bitwise_and â¢ '&' equality

    '&'  shift, and go to state 120

    $default  reduce using rule 107 (bitwise_xor)


State 64

  109 bitwise_and: equality â¢
  110 equality: equality â¢ EQ relational
  111         | equality â¢ NE relational

    EQ  shift, and go to state 121
    NE  shift, and go to state 122

    $default  reduce using rule 109 (bitwise_and)


State 65

  112 equality: relational â¢
  113 relational: relational â¢ LE sum
  114           | relational â¢ GE sum
  115           | relational â¢ '<' sum
  116           | relational â¢ '>' sum

    LE   shift, and go to state 123
    GE   shift, and go to state 124
    '<'  shift, and go to state 125
    '>'  shift, and go to state 126

    $default  reduce using rule 112 (equality)


State 66

  117 relational: sum â¢
  118 sum: sum â¢ '+' bitwise_shift
  119    | sum â¢ '-' bitwise_shift

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128

    '+'       [reduce using rule 117 (relational)]
    '-'       [reduce using rule 117 (relational)]
    $default  reduce using rule 117 (relational)


State 67

  120 sum: bitwise_shift â¢
  121 bitwise_shift: bitwise_shift â¢ LSHIFT term
  122              | bitwise_shift â¢ RSHIFT term

    LSHIFT  shift, and go to state 129
    RSHIFT  shift, and go to state 130

    $default  reduce using rule 120 (sum)


State 68

  123 bitwise_shift: term â¢
  124 term: term â¢ '*' prefix_op
  125     | term â¢ '/' prefix_op
  126     | term â¢ '%' prefix_op

    '*'  shift, and go to state 131
    '/'  shift, and go to state 132
    '%'  shift, and go to state 133

    $default  reduce using rule 123 (bitwise_shift)


State 69

  127 term: prefix_op â¢

    $default  reduce using rule 127 (term)


State 70

  132 prefix_op: primary â¢
  133 primary: primary â¢ '(' expr_list ')'
  134        | primary â¢ '(' ')'
  135        | primary â¢ '[' expr ']'
  136        | primary â¢ '.' IDENTIFIER
  137        | primary â¢ ':' IDENTIFIER

    '('  shift, and go to state 134
    '.'  shift, and go to state 135
    '['  shift, and go to state 136
    ':'  shift, and go to state 137

    '('       [reduce using rule 132 (prefix_op)]
    $default  reduce using rule 132 (prefix_op)


State 71

  138 primary: elementary â¢

    $default  reduce using rule 138 (primary)


State 72

  140 elementary: literal â¢

    $default  reduce using rule 140 (elementary)


State 73

   14 module_path: STRING â¢

    $default  reduce using rule 14 (module_path)


State 74

   17 module_path_compact: IDENTIFIER â¢ '.' module_path_compact
   18                    | IDENTIFIER â¢

    '.'  shift, and go to state 138

    $default  reduce using rule 18 (module_path_compact)


State 75

   15 module_path_upwards: '^' â¢ module_path_upwards
   16                    | '^' â¢

    '^'  shift, and go to state 75

    $default  reduce using rule 16 (module_path_upwards)

    module_path_upwards  go to state 139


State 76

   11 import_stmt: IMPORT module_path â¢ AS IDENTIFIER

    AS  shift, and go to state 140


State 77

   12 module_path: module_path_upwards â¢ module_path_compact

    IDENTIFIER  shift, and go to state 74

    module_path_compact  go to state 141


State 78

   13 module_path: module_path_compact â¢

    $default  reduce using rule 13 (module_path)


State 79

   19 export_stmt: EXPORT export_item_list â¢

    $default  reduce using rule 19 (export_stmt)


State 80

   20 export_item_list: export_item â¢ ',' export_item_list
   21                 | export_item â¢

    ','  shift, and go to state 142

    $default  reduce using rule 21 (export_item_list)


State 81

   22 export_item: expr â¢ AS IDENTIFIER

    AS  shift, and go to state 143


State 82

   24 identifier_item_list: IDENTIFIER â¢ ',' identifier_item_list
   25                     | IDENTIFIER â¢

    ','  shift, and go to state 144

    $default  reduce using rule 25 (identifier_item_list)


State 83

   23 global_variable_stmt: GLOBAL identifier_item_list â¢

    $default  reduce using rule 23 (global_variable_stmt)


State 84

   26 function_stmt: FUNCTION IDENTIFIER â¢ '(' parameter_list ')' block_stmt
   27              | FUNCTION IDENTIFIER â¢ '(' ')' block_stmt

    '('  shift, and go to state 145


State 85

   34 type_stmt: TYPE IDENTIFIER â¢ '{' member_list '}'

    '{'  shift, and go to state 146


State 86

   39 method_stmt: METHOD IDENTIFIER â¢ '(' parameter_list ')' OF IDENTIFIER block_stmt
   40            | METHOD IDENTIFIER â¢ '(' ')' OF IDENTIFIER block_stmt

    '('  shift, and go to state 147


State 87

   41 constructor_stmt: CONSTRUCTOR '(' â¢ parameter_list ')' OF IDENTIFIER block_stmt
   42                 | CONSTRUCTOR '(' â¢ ')' OF IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 148
    COPY        shift, and go to state 149
    REF         shift, and go to state 150
    PASS        shift, and go to state 151
    ')'         shift, and go to state 152

    parameter_list  go to state 153
    parameter_item  go to state 154


State 88

   43 destructor_stmt: DESTRUCTOR OF â¢ IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 155


State 89

   74 return_stmt: RETURN COPY â¢ expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 156
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 90

   75 return_stmt: RETURN REF â¢ expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 157
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 91

   76 return_stmt: RETURN PASS â¢ expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 158
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 92

   77 return_stmt: RETURN expr â¢

    $default  reduce using rule 77 (return_stmt)


State 93

   90 assignment_item: IDENTIFIER â¢ '=' expr
   91                | IDENTIFIER â¢

    '='  shift, and go to state 159

    $default  reduce using rule 91 (assignment_item)


State 94

   87 var_stmt: VAR assignment_item_list â¢

    $default  reduce using rule 87 (var_stmt)


State 95

   88 assignment_item_list: assignment_item â¢ ',' assignment_item_list
   89                     | assignment_item â¢

    ','  shift, and go to state 160

    $default  reduce using rule 89 (assignment_item_list)


State 96

   80 try_catch_stmt: TRY block_stmt â¢ catch_item_list FINALLY CATCH AS IDENTIFIER block_stmt
   81               | TRY block_stmt â¢ FINALLY CATCH AS IDENTIFIER block_stmt
   82               | TRY block_stmt â¢ catch_item_list

    CATCH    shift, and go to state 161
    FINALLY  shift, and go to state 162

    catch_item_list  go to state 163
    catch_item       go to state 164


State 97

   86 signal_stmt: SIGNAL expr â¢ BECAUSE expr

    BECAUSE  shift, and go to state 165


State 98

   70 if_stmt: IF expr â¢ stmt ELSE stmt
   71        | IF expr â¢ stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    stmt             go to state 166
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 99

   61 while_stmt: WHILE expr â¢ stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    stmt             go to state 167
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 100

   63 for_stmt: FOR ';' â¢ expr ';' expr stmt
   66         | FOR ';' â¢ ';' expr stmt
   67         | FOR ';' â¢ expr ';' stmt
   69         | FOR ';' â¢ ';' stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34
    ';'         shift, and go to state 168

    expr           go to state 169
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 101

   56 stmt: stmt â¢ ';'
   62 for_stmt: FOR stmt â¢ ';' expr ';' expr stmt
   64         | FOR stmt â¢ ';' ';' expr stmt
   65         | FOR stmt â¢ ';' expr ';' stmt
   68         | FOR stmt â¢ ';' ';' stmt

    ';'  shift, and go to state 170


State 102

   95 inline_if: WHEN new â¢ THEN new ELSE new

    THEN  shift, and go to state 171


State 103

   97 new: NEW logical_or â¢ '(' expr_list ')'
   98    | NEW logical_or â¢
  100 logical_or: logical_or â¢ OR logical_and

    OR   shift, and go to state 116
    '('  shift, and go to state 172

    '('       [reduce using rule 98 (new)]
    $default  reduce using rule 98 (new)


State 104

  130 prefix_op: NOT prefix_op â¢

    $default  reduce using rule 130 (prefix_op)


State 105

   58 block_stmt: '{' '}' â¢

    $default  reduce using rule 58 (block_stmt)


State 106

   56 stmt: stmt â¢ ';'
   59 stmt_list: stmt â¢ stmt_list
   60          | stmt â¢

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34
    ';'         shift, and go to state 112

    $default  reduce using rule 60 (stmt_list)

    stmt             go to state 106
    block_stmt       go to state 44
    stmt_list        go to state 173
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 107

   57 block_stmt: '{' stmt_list â¢ '}'

    '}'  shift, and go to state 174


State 108

  128 prefix_op: '+' prefix_op â¢

    $default  reduce using rule 128 (prefix_op)


State 109

  129 prefix_op: '-' prefix_op â¢

    $default  reduce using rule 129 (prefix_op)


State 110

  131 prefix_op: '~' prefix_op â¢

    $default  reduce using rule 131 (prefix_op)


State 111

  139 elementary: '(' expr â¢ ')'

    ')'  shift, and go to state 175


State 112

   56 stmt: stmt ';' â¢

    $default  reduce using rule 56 (stmt)


State 113

   78 assignment_stmt: expr COPIES â¢ expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 176
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 114

   79 assignment_stmt: expr REFS â¢ expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 177
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 115

   93 assignment: inline_if '=' â¢ assignment

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    assignment     go to state 178
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 116

  100 logical_or: logical_or OR â¢ logical_and

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    logical_and    go to state 179
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 117

  102 logical_and: logical_and AND â¢ bitwise_or

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    bitwise_or     go to state 180
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 118

  104 bitwise_or: bitwise_or '|' â¢ bitwise_xor

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    bitwise_xor    go to state 181
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 119

  106 bitwise_xor: bitwise_xor '^' â¢ bitwise_and

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    bitwise_and    go to state 182
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 120

  108 bitwise_and: bitwise_and '&' â¢ equality

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    equality       go to state 183
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 121

  110 equality: equality EQ â¢ relational

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    relational     go to state 184
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 122

  111 equality: equality NE â¢ relational

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    relational     go to state 185
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 123

  113 relational: relational LE â¢ sum

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    sum            go to state 186
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 124

  114 relational: relational GE â¢ sum

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    sum            go to state 187
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 125

  115 relational: relational '<' â¢ sum

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    sum            go to state 188
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 126

  116 relational: relational '>' â¢ sum

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    sum            go to state 189
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 127

  118 sum: sum '+' â¢ bitwise_shift

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    bitwise_shift  go to state 190
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 128

  119 sum: sum '-' â¢ bitwise_shift

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    bitwise_shift  go to state 191
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 129

  121 bitwise_shift: bitwise_shift LSHIFT â¢ term

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    term        go to state 192
    prefix_op   go to state 69
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 130

  122 bitwise_shift: bitwise_shift RSHIFT â¢ term

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    term        go to state 193
    prefix_op   go to state 69
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 131

  124 term: term '*' â¢ prefix_op

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    prefix_op   go to state 194
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 132

  125 term: term '/' â¢ prefix_op

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    prefix_op   go to state 195
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 133

  126 term: term '%' â¢ prefix_op

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    prefix_op   go to state 196
    primary     go to state 70
    elementary  go to state 71
    literal     go to state 72


State 134

  133 primary: primary '(' â¢ expr_list ')'
  134        | primary '(' â¢ ')'

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34
    ')'         shift, and go to state 197

    expr           go to state 198
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72
    expr_list      go to state 199


State 135

  136 primary: primary '.' â¢ IDENTIFIER

    IDENTIFIER  shift, and go to state 200


State 136

  135 primary: primary '[' â¢ expr ']'

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 201
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 137

  137 primary: primary ':' â¢ IDENTIFIER

    IDENTIFIER  shift, and go to state 202


State 138

   17 module_path_compact: IDENTIFIER '.' â¢ module_path_compact

    IDENTIFIER  shift, and go to state 74

    module_path_compact  go to state 203


State 139

   15 module_path_upwards: '^' module_path_upwards â¢

    $default  reduce using rule 15 (module_path_upwards)


State 140

   11 import_stmt: IMPORT module_path AS â¢ IDENTIFIER

    IDENTIFIER  shift, and go to state 204


State 141

   12 module_path: module_path_upwards module_path_compact â¢

    $default  reduce using rule 12 (module_path)


State 142

   20 export_item_list: export_item ',' â¢ export_item_list

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    export_item_list  go to state 205
    export_item       go to state 80
    expr              go to state 81
    assignment        go to state 56
    inline_if         go to state 57
    new               go to state 58
    logical_or        go to state 59
    logical_and       go to state 60
    bitwise_or        go to state 61
    bitwise_xor       go to state 62
    bitwise_and       go to state 63
    equality          go to state 64
    relational        go to state 65
    sum               go to state 66
    bitwise_shift     go to state 67
    term              go to state 68
    prefix_op         go to state 69
    primary           go to state 70
    elementary        go to state 71
    literal           go to state 72


State 143

   22 export_item: expr AS â¢ IDENTIFIER

    IDENTIFIER  shift, and go to state 206


State 144

   24 identifier_item_list: IDENTIFIER ',' â¢ identifier_item_list

    IDENTIFIER  shift, and go to state 82

    identifier_item_list  go to state 207


State 145

   26 function_stmt: FUNCTION IDENTIFIER '(' â¢ parameter_list ')' block_stmt
   27              | FUNCTION IDENTIFIER '(' â¢ ')' block_stmt

    IDENTIFIER  shift, and go to state 148
    COPY        shift, and go to state 149
    REF         shift, and go to state 150
    PASS        shift, and go to state 151
    ')'         shift, and go to state 208

    parameter_list  go to state 209
    parameter_item  go to state 154


State 146

   34 type_stmt: TYPE IDENTIFIER '{' â¢ member_list '}'

    IDENTIFIER  shift, and go to state 210

    member_list  go to state 211
    member_item  go to state 212


State 147

   39 method_stmt: METHOD IDENTIFIER '(' â¢ parameter_list ')' OF IDENTIFIER block_stmt
   40            | METHOD IDENTIFIER '(' â¢ ')' OF IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 148
    COPY        shift, and go to state 149
    REF         shift, and go to state 150
    PASS        shift, and go to state 151
    ')'         shift, and go to state 213

    parameter_list  go to state 214
    parameter_item  go to state 154


State 148

   33 parameter_item: IDENTIFIER â¢

    $default  reduce using rule 33 (parameter_item)


State 149

   30 parameter_item: COPY â¢ IDENTIFIER

    IDENTIFIER  shift, and go to state 215


State 150

   31 parameter_item: REF â¢ IDENTIFIER

    IDENTIFIER  shift, and go to state 216


State 151

   32 parameter_item: PASS â¢ IDENTIFIER

    IDENTIFIER  shift, and go to state 217


State 152

   42 constructor_stmt: CONSTRUCTOR '(' ')' â¢ OF IDENTIFIER block_stmt

    OF  shift, and go to state 218


State 153

   41 constructor_stmt: CONSTRUCTOR '(' parameter_list â¢ ')' OF IDENTIFIER block_stmt

    ')'  shift, and go to state 219


State 154

   28 parameter_list: parameter_item â¢ ',' parameter_list
   29               | parameter_item â¢

    ','  shift, and go to state 220

    $default  reduce using rule 29 (parameter_list)


State 155

   43 destructor_stmt: DESTRUCTOR OF IDENTIFIER â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 221


State 156

   74 return_stmt: RETURN COPY expr â¢

    $default  reduce using rule 74 (return_stmt)


State 157

   75 return_stmt: RETURN REF expr â¢

    $default  reduce using rule 75 (return_stmt)


State 158

   76 return_stmt: RETURN PASS expr â¢

    $default  reduce using rule 76 (return_stmt)


State 159

   90 assignment_item: IDENTIFIER '=' â¢ expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 222
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 160

   88 assignment_item_list: assignment_item ',' â¢ assignment_item_list

    IDENTIFIER  shift, and go to state 93

    assignment_item_list  go to state 223
    assignment_item       go to state 95


State 161

   85 catch_item: CATCH â¢ expr AS IDENTIFIER block_stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 224
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 162

   81 try_catch_stmt: TRY block_stmt FINALLY â¢ CATCH AS IDENTIFIER block_stmt

    CATCH  shift, and go to state 225


State 163

   80 try_catch_stmt: TRY block_stmt catch_item_list â¢ FINALLY CATCH AS IDENTIFIER block_stmt
   82               | TRY block_stmt catch_item_list â¢

    FINALLY  shift, and go to state 226

    $default  reduce using rule 82 (try_catch_stmt)


State 164

   83 catch_item_list: catch_item â¢ catch_item_list
   84                | catch_item â¢

    CATCH  shift, and go to state 161

    $default  reduce using rule 84 (catch_item_list)

    catch_item_list  go to state 227
    catch_item       go to state 164


State 165

   86 signal_stmt: SIGNAL expr BECAUSE â¢ expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 228
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 166

   56 stmt: stmt â¢ ';'
   70 if_stmt: IF expr stmt â¢ ELSE stmt
   71        | IF expr stmt â¢

    ELSE  shift, and go to state 229
    ';'   shift, and go to state 112

    ELSE      [reduce using rule 71 (if_stmt)]
    ';'       [reduce using rule 71 (if_stmt)]
    $default  reduce using rule 71 (if_stmt)


State 167

   56 stmt: stmt â¢ ';'
   61 while_stmt: WHILE expr stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 61 (while_stmt)]
    $default  reduce using rule 61 (while_stmt)


State 168

   66 for_stmt: FOR ';' ';' â¢ expr stmt
   69         | FOR ';' ';' â¢ stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    stmt             go to state 230
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 231
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 169

   63 for_stmt: FOR ';' expr â¢ ';' expr stmt
   67         | FOR ';' expr â¢ ';' stmt

    ';'  shift, and go to state 232


State 170

   56 stmt: stmt ';' â¢
   62 for_stmt: FOR stmt ';' â¢ expr ';' expr stmt
   64         | FOR stmt ';' â¢ ';' expr stmt
   65         | FOR stmt ';' â¢ expr ';' stmt
   68         | FOR stmt ';' â¢ ';' stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34
    ';'         shift, and go to state 233

    ';'  [reduce using rule 56 (stmt)]

    expr           go to state 234
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 171

   95 inline_if: WHEN new THEN â¢ new ELSE new

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    new            go to state 235
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 172

   97 new: NEW logical_or '(' â¢ expr_list ')'

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 198
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72
    expr_list      go to state 236


State 173

   59 stmt_list: stmt stmt_list â¢

    $default  reduce using rule 59 (stmt_list)


State 174

   57 block_stmt: '{' stmt_list '}' â¢

    $default  reduce using rule 57 (block_stmt)


State 175

  139 elementary: '(' expr ')' â¢

    $default  reduce using rule 139 (elementary)


State 176

   78 assignment_stmt: expr COPIES expr â¢

    $default  reduce using rule 78 (assignment_stmt)


State 177

   79 assignment_stmt: expr REFS expr â¢

    $default  reduce using rule 79 (assignment_stmt)


State 178

   93 assignment: inline_if '=' assignment â¢

    $default  reduce using rule 93 (assignment)


State 179

  100 logical_or: logical_or OR logical_and â¢
  102 logical_and: logical_and â¢ AND bitwise_or

    AND  shift, and go to state 117

    $default  reduce using rule 100 (logical_or)


State 180

  102 logical_and: logical_and AND bitwise_or â¢
  104 bitwise_or: bitwise_or â¢ '|' bitwise_xor

    '|'  shift, and go to state 118

    $default  reduce using rule 102 (logical_and)


State 181

  104 bitwise_or: bitwise_or '|' bitwise_xor â¢
  106 bitwise_xor: bitwise_xor â¢ '^' bitwise_and

    '^'  shift, and go to state 119

    $default  reduce using rule 104 (bitwise_or)


State 182

  106 bitwise_xor: bitwise_xor '^' bitwise_and â¢
  108 bitwise_and: bitwise_and â¢ '&' equality

    '&'  shift, and go to state 120

    $default  reduce using rule 106 (bitwise_xor)


State 183

  108 bitwise_and: bitwise_and '&' equality â¢
  110 equality: equality â¢ EQ relational
  111         | equality â¢ NE relational

    EQ  shift, and go to state 121
    NE  shift, and go to state 122

    $default  reduce using rule 108 (bitwise_and)


State 184

  110 equality: equality EQ relational â¢
  113 relational: relational â¢ LE sum
  114           | relational â¢ GE sum
  115           | relational â¢ '<' sum
  116           | relational â¢ '>' sum

    LE   shift, and go to state 123
    GE   shift, and go to state 124
    '<'  shift, and go to state 125
    '>'  shift, and go to state 126

    $default  reduce using rule 110 (equality)


State 185

  111 equality: equality NE relational â¢
  113 relational: relational â¢ LE sum
  114           | relational â¢ GE sum
  115           | relational â¢ '<' sum
  116           | relational â¢ '>' sum

    LE   shift, and go to state 123
    GE   shift, and go to state 124
    '<'  shift, and go to state 125
    '>'  shift, and go to state 126

    $default  reduce using rule 111 (equality)


State 186

  113 relational: relational LE sum â¢
  118 sum: sum â¢ '+' bitwise_shift
  119    | sum â¢ '-' bitwise_shift

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128

    '+'       [reduce using rule 113 (relational)]
    '-'       [reduce using rule 113 (relational)]
    $default  reduce using rule 113 (relational)


State 187

  114 relational: relational GE sum â¢
  118 sum: sum â¢ '+' bitwise_shift
  119    | sum â¢ '-' bitwise_shift

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128

    '+'       [reduce using rule 114 (relational)]
    '-'       [reduce using rule 114 (relational)]
    $default  reduce using rule 114 (relational)


State 188

  115 relational: relational '<' sum â¢
  118 sum: sum â¢ '+' bitwise_shift
  119    | sum â¢ '-' bitwise_shift

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128

    '+'       [reduce using rule 115 (relational)]
    '-'       [reduce using rule 115 (relational)]
    $default  reduce using rule 115 (relational)


State 189

  116 relational: relational '>' sum â¢
  118 sum: sum â¢ '+' bitwise_shift
  119    | sum â¢ '-' bitwise_shift

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128

    '+'       [reduce using rule 116 (relational)]
    '-'       [reduce using rule 116 (relational)]
    $default  reduce using rule 116 (relational)


State 190

  118 sum: sum '+' bitwise_shift â¢
  121 bitwise_shift: bitwise_shift â¢ LSHIFT term
  122              | bitwise_shift â¢ RSHIFT term

    LSHIFT  shift, and go to state 129
    RSHIFT  shift, and go to state 130

    $default  reduce using rule 118 (sum)


State 191

  119 sum: sum '-' bitwise_shift â¢
  121 bitwise_shift: bitwise_shift â¢ LSHIFT term
  122              | bitwise_shift â¢ RSHIFT term

    LSHIFT  shift, and go to state 129
    RSHIFT  shift, and go to state 130

    $default  reduce using rule 119 (sum)


State 192

  121 bitwise_shift: bitwise_shift LSHIFT term â¢
  124 term: term â¢ '*' prefix_op
  125     | term â¢ '/' prefix_op
  126     | term â¢ '%' prefix_op

    '*'  shift, and go to state 131
    '/'  shift, and go to state 132
    '%'  shift, and go to state 133

    $default  reduce using rule 121 (bitwise_shift)


State 193

  122 bitwise_shift: bitwise_shift RSHIFT term â¢
  124 term: term â¢ '*' prefix_op
  125     | term â¢ '/' prefix_op
  126     | term â¢ '%' prefix_op

    '*'  shift, and go to state 131
    '/'  shift, and go to state 132
    '%'  shift, and go to state 133

    $default  reduce using rule 122 (bitwise_shift)


State 194

  124 term: term '*' prefix_op â¢

    $default  reduce using rule 124 (term)


State 195

  125 term: term '/' prefix_op â¢

    $default  reduce using rule 125 (term)


State 196

  126 term: term '%' prefix_op â¢

    $default  reduce using rule 126 (term)


State 197

  134 primary: primary '(' ')' â¢

    $default  reduce using rule 134 (primary)


State 198

  148 expr_list: expr â¢ ',' expr_list
  149          | expr â¢

    ','  shift, and go to state 237

    $default  reduce using rule 149 (expr_list)


State 199

  133 primary: primary '(' expr_list â¢ ')'

    ')'  shift, and go to state 238


State 200

  136 primary: primary '.' IDENTIFIER â¢

    $default  reduce using rule 136 (primary)


State 201

  135 primary: primary '[' expr â¢ ']'

    ']'  shift, and go to state 239


State 202

  137 primary: primary ':' IDENTIFIER â¢

    $default  reduce using rule 137 (primary)


State 203

   17 module_path_compact: IDENTIFIER '.' module_path_compact â¢

    $default  reduce using rule 17 (module_path_compact)


State 204

   11 import_stmt: IMPORT module_path AS IDENTIFIER â¢

    $default  reduce using rule 11 (import_stmt)


State 205

   20 export_item_list: export_item ',' export_item_list â¢

    $default  reduce using rule 20 (export_item_list)


State 206

   22 export_item: expr AS IDENTIFIER â¢

    $default  reduce using rule 22 (export_item)


State 207

   24 identifier_item_list: IDENTIFIER ',' identifier_item_list â¢

    $default  reduce using rule 24 (identifier_item_list)


State 208

   27 function_stmt: FUNCTION IDENTIFIER '(' ')' â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 240


State 209

   26 function_stmt: FUNCTION IDENTIFIER '(' parameter_list â¢ ')' block_stmt

    ')'  shift, and go to state 241


State 210

   37 member_item: IDENTIFIER â¢ '(' ')'
   38            | IDENTIFIER â¢

    '('  shift, and go to state 242

    $default  reduce using rule 38 (member_item)


State 211

   34 type_stmt: TYPE IDENTIFIER '{' member_list â¢ '}'

    '}'  shift, and go to state 243


State 212

   35 member_list: member_item â¢ ',' member_list
   36            | member_item â¢

    ','  shift, and go to state 244

    $default  reduce using rule 36 (member_list)


State 213

   40 method_stmt: METHOD IDENTIFIER '(' ')' â¢ OF IDENTIFIER block_stmt

    OF  shift, and go to state 245


State 214

   39 method_stmt: METHOD IDENTIFIER '(' parameter_list â¢ ')' OF IDENTIFIER block_stmt

    ')'  shift, and go to state 246


State 215

   30 parameter_item: COPY IDENTIFIER â¢

    $default  reduce using rule 30 (parameter_item)


State 216

   31 parameter_item: REF IDENTIFIER â¢

    $default  reduce using rule 31 (parameter_item)


State 217

   32 parameter_item: PASS IDENTIFIER â¢

    $default  reduce using rule 32 (parameter_item)


State 218

   42 constructor_stmt: CONSTRUCTOR '(' ')' OF â¢ IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 247


State 219

   41 constructor_stmt: CONSTRUCTOR '(' parameter_list ')' â¢ OF IDENTIFIER block_stmt

    OF  shift, and go to state 248


State 220

   28 parameter_list: parameter_item ',' â¢ parameter_list

    IDENTIFIER  shift, and go to state 148
    COPY        shift, and go to state 149
    REF         shift, and go to state 150
    PASS        shift, and go to state 151

    parameter_list  go to state 249
    parameter_item  go to state 154


State 221

   43 destructor_stmt: DESTRUCTOR OF IDENTIFIER block_stmt â¢

    $default  reduce using rule 43 (destructor_stmt)


State 222

   90 assignment_item: IDENTIFIER '=' expr â¢

    $default  reduce using rule 90 (assignment_item)


State 223

   88 assignment_item_list: assignment_item ',' assignment_item_list â¢

    $default  reduce using rule 88 (assignment_item_list)


State 224

   85 catch_item: CATCH expr â¢ AS IDENTIFIER block_stmt

    AS  shift, and go to state 250


State 225

   81 try_catch_stmt: TRY block_stmt FINALLY CATCH â¢ AS IDENTIFIER block_stmt

    AS  shift, and go to state 251


State 226

   80 try_catch_stmt: TRY block_stmt catch_item_list FINALLY â¢ CATCH AS IDENTIFIER block_stmt

    CATCH  shift, and go to state 252


State 227

   83 catch_item_list: catch_item catch_item_list â¢

    $default  reduce using rule 83 (catch_item_list)


State 228

   86 signal_stmt: SIGNAL expr BECAUSE expr â¢

    $default  reduce using rule 86 (signal_stmt)


State 229

   70 if_stmt: IF expr stmt ELSE â¢ stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    stmt             go to state 253
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 230

   56 stmt: stmt â¢ ';'
   69 for_stmt: FOR ';' ';' stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 69 (for_stmt)]
    $default  reduce using rule 69 (for_stmt)


State 231

   44 stmt: expr â¢
   66 for_stmt: FOR ';' ';' expr â¢ stmt
   78 assignment_stmt: expr â¢ COPIES expr
   79                | expr â¢ REFS expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    COPIES      shift, and go to state 113
    REFS        shift, and go to state 114
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    BOOL        [reduce using rule 44 (stmt)]
    CHAR        [reduce using rule 44 (stmt)]
    INT         [reduce using rule 44 (stmt)]
    FLOAT       [reduce using rule 44 (stmt)]
    STRING      [reduce using rule 44 (stmt)]
    IDENTIFIER  [reduce using rule 44 (stmt)]
    NULLV       [reduce using rule 44 (stmt)]
    CONTINUE    [reduce using rule 44 (stmt)]
    BREAK       [reduce using rule 44 (stmt)]
    RETURN      [reduce using rule 44 (stmt)]
    VAR         [reduce using rule 44 (stmt)]
    TRY         [reduce using rule 44 (stmt)]
    SIGNAL      [reduce using rule 44 (stmt)]
    IF          [reduce using rule 44 (stmt)]
    WHILE       [reduce using rule 44 (stmt)]
    FOR         [reduce using rule 44 (stmt)]
    WHEN        [reduce using rule 44 (stmt)]
    NEW         [reduce using rule 44 (stmt)]
    NOT         [reduce using rule 44 (stmt)]
    '{'         [reduce using rule 44 (stmt)]
    '+'         [reduce using rule 44 (stmt)]
    '-'         [reduce using rule 44 (stmt)]
    '~'         [reduce using rule 44 (stmt)]
    '('         [reduce using rule 44 (stmt)]
    $default    reduce using rule 44 (stmt)

    stmt             go to state 254
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 232

   63 for_stmt: FOR ';' expr ';' â¢ expr stmt
   67         | FOR ';' expr ';' â¢ stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    stmt             go to state 255
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 256
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 233

   64 for_stmt: FOR stmt ';' ';' â¢ expr stmt
   68         | FOR stmt ';' ';' â¢ stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    stmt             go to state 257
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 258
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 234

   62 for_stmt: FOR stmt ';' expr â¢ ';' expr stmt
   65         | FOR stmt ';' expr â¢ ';' stmt

    ';'  shift, and go to state 259


State 235

   95 inline_if: WHEN new THEN new â¢ ELSE new

    ELSE  shift, and go to state 260


State 236

   97 new: NEW logical_or '(' expr_list â¢ ')'

    ')'  shift, and go to state 261


State 237

  148 expr_list: expr ',' â¢ expr_list

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    expr           go to state 198
    assignment     go to state 56
    inline_if      go to state 57
    new            go to state 58
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72
    expr_list      go to state 262


State 238

  133 primary: primary '(' expr_list ')' â¢

    $default  reduce using rule 133 (primary)


State 239

  135 primary: primary '[' expr ']' â¢

    $default  reduce using rule 135 (primary)


State 240

   27 function_stmt: FUNCTION IDENTIFIER '(' ')' block_stmt â¢

    $default  reduce using rule 27 (function_stmt)


State 241

   26 function_stmt: FUNCTION IDENTIFIER '(' parameter_list ')' â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 263


State 242

   37 member_item: IDENTIFIER '(' â¢ ')'

    ')'  shift, and go to state 264


State 243

   34 type_stmt: TYPE IDENTIFIER '{' member_list '}' â¢

    $default  reduce using rule 34 (type_stmt)


State 244

   35 member_list: member_item ',' â¢ member_list

    IDENTIFIER  shift, and go to state 210

    member_list  go to state 265
    member_item  go to state 212


State 245

   40 method_stmt: METHOD IDENTIFIER '(' ')' OF â¢ IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 266


State 246

   39 method_stmt: METHOD IDENTIFIER '(' parameter_list ')' â¢ OF IDENTIFIER block_stmt

    OF  shift, and go to state 267


State 247

   42 constructor_stmt: CONSTRUCTOR '(' ')' OF IDENTIFIER â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 268


State 248

   41 constructor_stmt: CONSTRUCTOR '(' parameter_list ')' OF â¢ IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 269


State 249

   28 parameter_list: parameter_item ',' parameter_list â¢

    $default  reduce using rule 28 (parameter_list)


State 250

   85 catch_item: CATCH expr AS â¢ IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 270


State 251

   81 try_catch_stmt: TRY block_stmt FINALLY CATCH AS â¢ IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 271


State 252

   80 try_catch_stmt: TRY block_stmt catch_item_list FINALLY CATCH â¢ AS IDENTIFIER block_stmt

    AS  shift, and go to state 272


State 253

   56 stmt: stmt â¢ ';'
   70 if_stmt: IF expr stmt ELSE stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 70 (if_stmt)]
    $default  reduce using rule 70 (if_stmt)


State 254

   56 stmt: stmt â¢ ';'
   66 for_stmt: FOR ';' ';' expr stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 66 (for_stmt)]
    $default  reduce using rule 66 (for_stmt)


State 255

   56 stmt: stmt â¢ ';'
   67 for_stmt: FOR ';' expr ';' stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 67 (for_stmt)]
    $default  reduce using rule 67 (for_stmt)


State 256

   44 stmt: expr â¢
   63 for_stmt: FOR ';' expr ';' expr â¢ stmt
   78 assignment_stmt: expr â¢ COPIES expr
   79                | expr â¢ REFS expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    COPIES      shift, and go to state 113
    REFS        shift, and go to state 114
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    BOOL        [reduce using rule 44 (stmt)]
    CHAR        [reduce using rule 44 (stmt)]
    INT         [reduce using rule 44 (stmt)]
    FLOAT       [reduce using rule 44 (stmt)]
    STRING      [reduce using rule 44 (stmt)]
    IDENTIFIER  [reduce using rule 44 (stmt)]
    NULLV       [reduce using rule 44 (stmt)]
    CONTINUE    [reduce using rule 44 (stmt)]
    BREAK       [reduce using rule 44 (stmt)]
    RETURN      [reduce using rule 44 (stmt)]
    VAR         [reduce using rule 44 (stmt)]
    TRY         [reduce using rule 44 (stmt)]
    SIGNAL      [reduce using rule 44 (stmt)]
    IF          [reduce using rule 44 (stmt)]
    WHILE       [reduce using rule 44 (stmt)]
    FOR         [reduce using rule 44 (stmt)]
    WHEN        [reduce using rule 44 (stmt)]
    NEW         [reduce using rule 44 (stmt)]
    NOT         [reduce using rule 44 (stmt)]
    '{'         [reduce using rule 44 (stmt)]
    '+'         [reduce using rule 44 (stmt)]
    '-'         [reduce using rule 44 (stmt)]
    '~'         [reduce using rule 44 (stmt)]
    '('         [reduce using rule 44 (stmt)]
    $default    reduce using rule 44 (stmt)

    stmt             go to state 273
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 257

   56 stmt: stmt â¢ ';'
   68 for_stmt: FOR stmt ';' ';' stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 68 (for_stmt)]
    $default  reduce using rule 68 (for_stmt)


State 258

   44 stmt: expr â¢
   64 for_stmt: FOR stmt ';' ';' expr â¢ stmt
   78 assignment_stmt: expr â¢ COPIES expr
   79                | expr â¢ REFS expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    COPIES      shift, and go to state 113
    REFS        shift, and go to state 114
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    BOOL        [reduce using rule 44 (stmt)]
    CHAR        [reduce using rule 44 (stmt)]
    INT         [reduce using rule 44 (stmt)]
    FLOAT       [reduce using rule 44 (stmt)]
    STRING      [reduce using rule 44 (stmt)]
    IDENTIFIER  [reduce using rule 44 (stmt)]
    NULLV       [reduce using rule 44 (stmt)]
    CONTINUE    [reduce using rule 44 (stmt)]
    BREAK       [reduce using rule 44 (stmt)]
    RETURN      [reduce using rule 44 (stmt)]
    VAR         [reduce using rule 44 (stmt)]
    TRY         [reduce using rule 44 (stmt)]
    SIGNAL      [reduce using rule 44 (stmt)]
    IF          [reduce using rule 44 (stmt)]
    WHILE       [reduce using rule 44 (stmt)]
    FOR         [reduce using rule 44 (stmt)]
    WHEN        [reduce using rule 44 (stmt)]
    NEW         [reduce using rule 44 (stmt)]
    NOT         [reduce using rule 44 (stmt)]
    '{'         [reduce using rule 44 (stmt)]
    '+'         [reduce using rule 44 (stmt)]
    '-'         [reduce using rule 44 (stmt)]
    '~'         [reduce using rule 44 (stmt)]
    '('         [reduce using rule 44 (stmt)]
    $default    reduce using rule 44 (stmt)

    stmt             go to state 274
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 259

   62 for_stmt: FOR stmt ';' expr ';' â¢ expr stmt
   65         | FOR stmt ';' expr ';' â¢ stmt

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    stmt             go to state 275
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 276
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 260

   95 inline_if: WHEN new THEN new ELSE â¢ new

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    new            go to state 277
    logical_or     go to state 59
    logical_and    go to state 60
    bitwise_or     go to state 61
    bitwise_xor    go to state 62
    bitwise_and    go to state 63
    equality       go to state 64
    relational     go to state 65
    sum            go to state 66
    bitwise_shift  go to state 67
    term           go to state 68
    prefix_op      go to state 69
    primary        go to state 70
    elementary     go to state 71
    literal        go to state 72


State 261

   97 new: NEW logical_or '(' expr_list ')' â¢

    $default  reduce using rule 97 (new)


State 262

  148 expr_list: expr ',' expr_list â¢

    $default  reduce using rule 148 (expr_list)


State 263

   26 function_stmt: FUNCTION IDENTIFIER '(' parameter_list ')' block_stmt â¢

    $default  reduce using rule 26 (function_stmt)


State 264

   37 member_item: IDENTIFIER '(' ')' â¢

    $default  reduce using rule 37 (member_item)


State 265

   35 member_list: member_item ',' member_list â¢

    $default  reduce using rule 35 (member_list)


State 266

   40 method_stmt: METHOD IDENTIFIER '(' ')' OF IDENTIFIER â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 278


State 267

   39 method_stmt: METHOD IDENTIFIER '(' parameter_list ')' OF â¢ IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 279


State 268

   42 constructor_stmt: CONSTRUCTOR '(' ')' OF IDENTIFIER block_stmt â¢

    $default  reduce using rule 42 (constructor_stmt)


State 269

   41 constructor_stmt: CONSTRUCTOR '(' parameter_list ')' OF IDENTIFIER â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 280


State 270

   85 catch_item: CATCH expr AS IDENTIFIER â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 281


State 271

   81 try_catch_stmt: TRY block_stmt FINALLY CATCH AS IDENTIFIER â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 282


State 272

   80 try_catch_stmt: TRY block_stmt catch_item_list FINALLY CATCH AS â¢ IDENTIFIER block_stmt

    IDENTIFIER  shift, and go to state 283


State 273

   56 stmt: stmt â¢ ';'
   63 for_stmt: FOR ';' expr ';' expr stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 63 (for_stmt)]
    $default  reduce using rule 63 (for_stmt)


State 274

   56 stmt: stmt â¢ ';'
   64 for_stmt: FOR stmt ';' ';' expr stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 64 (for_stmt)]
    $default  reduce using rule 64 (for_stmt)


State 275

   56 stmt: stmt â¢ ';'
   65 for_stmt: FOR stmt ';' expr ';' stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 65 (for_stmt)]
    $default  reduce using rule 65 (for_stmt)


State 276

   44 stmt: expr â¢
   62 for_stmt: FOR stmt ';' expr ';' expr â¢ stmt
   78 assignment_stmt: expr â¢ COPIES expr
   79                | expr â¢ REFS expr

    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    STRING      shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    NULLV       shift, and go to state 9
    CONTINUE    shift, and go to state 18
    BREAK       shift, and go to state 19
    RETURN      shift, and go to state 20
    VAR         shift, and go to state 21
    TRY         shift, and go to state 22
    SIGNAL      shift, and go to state 23
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    FOR         shift, and go to state 26
    WHEN        shift, and go to state 27
    NEW         shift, and go to state 28
    NOT         shift, and go to state 29
    COPIES      shift, and go to state 113
    REFS        shift, and go to state 114
    '{'         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '~'         shift, and go to state 33
    '('         shift, and go to state 34

    BOOL        [reduce using rule 44 (stmt)]
    CHAR        [reduce using rule 44 (stmt)]
    INT         [reduce using rule 44 (stmt)]
    FLOAT       [reduce using rule 44 (stmt)]
    STRING      [reduce using rule 44 (stmt)]
    IDENTIFIER  [reduce using rule 44 (stmt)]
    NULLV       [reduce using rule 44 (stmt)]
    CONTINUE    [reduce using rule 44 (stmt)]
    BREAK       [reduce using rule 44 (stmt)]
    RETURN      [reduce using rule 44 (stmt)]
    VAR         [reduce using rule 44 (stmt)]
    TRY         [reduce using rule 44 (stmt)]
    SIGNAL      [reduce using rule 44 (stmt)]
    IF          [reduce using rule 44 (stmt)]
    WHILE       [reduce using rule 44 (stmt)]
    FOR         [reduce using rule 44 (stmt)]
    WHEN        [reduce using rule 44 (stmt)]
    NEW         [reduce using rule 44 (stmt)]
    NOT         [reduce using rule 44 (stmt)]
    '{'         [reduce using rule 44 (stmt)]
    '+'         [reduce using rule 44 (stmt)]
    '-'         [reduce using rule 44 (stmt)]
    '~'         [reduce using rule 44 (stmt)]
    '('         [reduce using rule 44 (stmt)]
    $default    reduce using rule 44 (stmt)

    stmt             go to state 284
    block_stmt       go to state 44
    while_stmt       go to state 45
    for_stmt         go to state 46
    if_stmt          go to state 47
    continue_stmt    go to state 48
    break_stmt       go to state 49
    return_stmt      go to state 50
    assignment_stmt  go to state 51
    try_catch_stmt   go to state 52
    signal_stmt      go to state 53
    var_stmt         go to state 54
    expr             go to state 55
    assignment       go to state 56
    inline_if        go to state 57
    new              go to state 58
    logical_or       go to state 59
    logical_and      go to state 60
    bitwise_or       go to state 61
    bitwise_xor      go to state 62
    bitwise_and      go to state 63
    equality         go to state 64
    relational       go to state 65
    sum              go to state 66
    bitwise_shift    go to state 67
    term             go to state 68
    prefix_op        go to state 69
    primary          go to state 70
    elementary       go to state 71
    literal          go to state 72


State 277

   95 inline_if: WHEN new THEN new ELSE new â¢

    $default  reduce using rule 95 (inline_if)


State 278

   40 method_stmt: METHOD IDENTIFIER '(' ')' OF IDENTIFIER block_stmt â¢

    $default  reduce using rule 40 (method_stmt)


State 279

   39 method_stmt: METHOD IDENTIFIER '(' parameter_list ')' OF IDENTIFIER â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 285


State 280

   41 constructor_stmt: CONSTRUCTOR '(' parameter_list ')' OF IDENTIFIER block_stmt â¢

    $default  reduce using rule 41 (constructor_stmt)


State 281

   85 catch_item: CATCH expr AS IDENTIFIER block_stmt â¢

    $default  reduce using rule 85 (catch_item)


State 282

   81 try_catch_stmt: TRY block_stmt FINALLY CATCH AS IDENTIFIER block_stmt â¢

    $default  reduce using rule 81 (try_catch_stmt)


State 283

   80 try_catch_stmt: TRY block_stmt catch_item_list FINALLY CATCH AS IDENTIFIER â¢ block_stmt

    '{'  shift, and go to state 30

    block_stmt  go to state 286


State 284

   56 stmt: stmt â¢ ';'
   62 for_stmt: FOR stmt ';' expr ';' expr stmt â¢

    ';'  shift, and go to state 112

    ';'       [reduce using rule 62 (for_stmt)]
    $default  reduce using rule 62 (for_stmt)


State 285

   39 method_stmt: METHOD IDENTIFIER '(' parameter_list ')' OF IDENTIFIER block_stmt â¢

    $default  reduce using rule 39 (method_stmt)


State 286

   80 try_catch_stmt: TRY block_stmt catch_item_list FINALLY CATCH AS IDENTIFIER block_stmt â¢

    $default  reduce using rule 80 (try_catch_stmt)
