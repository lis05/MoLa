   0  $accept : program $end

   1  program : program import_stmt
   2          | program export_stmt
   3          | program global_variable_stmt
   4          | program function_stmt
   5          | program type_stmt
   6          | program method_stmt
   7          | program constructor_stmt
   8          | program destructor_stmt
   9          | program stmt
  10          |

  11  import_stmt : IMPORT MODULE_PATH AS IDENTIFIER

  12  export_stmt : EXPORT export_item_list

  13  export_item_list : export_item_list ',' export_item
  14                   | export_item

  15  export_item : expr AS IDENTIFIER

  16  global_variable_stmt : GLOBAL IDENTIFIER

  17  function_stmt : FUNCTION IDENTIFIER '(' parameter_list ')' block_stmt
  18                | FUNCTION IDENTIFIER '(' ')' block_stmt

  19  parameter_list : parameter_list ',' parameter_item
  20                 | parameter_item

  21  parameter_item : COPY IDENTIFIER
  22                 | REF IDENTIFIER
  23                 | PASS IDENTIFIER

  24  type_stmt : TYPE IDENTIFIER '{' PUBLIC member_list PRIVATE member_list '}'
  25            | TYPE IDENTIFIER '{' PUBLIC PRIVATE member_list '}'
  26            | TYPE IDENTIFIER '{' PUBLIC member_list PRIVATE '}'

  27  member_list : member_list ',' member_item
  28              | member_item

  29  member_item : IDENTIFIER "()"
  30              | IDENTIFIER

  31  method_stmt : METHOD IDENTIFIER '(' parameter_list ')' OF IDENTIFIER block_stmt

  32  constructor_stmt : CONSTRUCTOR '(' parameter_list ')' OF IDENTIFIER block_stmt

  33  destructor_stmt : DESTRUCTOR OF IDENTIFIER block_stmt

  34  stmt : expr
  35       | block_stmt
  36       | while_stmt
  37       | for_stmt
  38       | if_stmt
  39       | continue_stmt
  40       | break_stmt
  41       | return_stmt
  42       | assignment_stmt
  43       | try_catch_stmt
  44       | signal_stmt
  45       | var_stmt
  46       | stmt ';'

  47  block_stmt : '{' stmt_list '}'
  48             | '{' '}'

  49  stmt_list : stmt_list stmt
  50            | stmt

  51  while_stmt : WHILE expr stmt

  52  for_stmt : FOR expr ';' expr ';' expr stmt
  53           | FOR ';' expr ';' expr stmt
  54           | FOR expr ';' ';' expr stmt
  55           | FOR expr ';' expr ';' stmt
  56           | FOR ';' ';' expr stmt
  57           | FOR ';' expr ';' stmt
  58           | FOR expr ';' ';' stmt
  59           | FOR ';' ';' stmt

  60  if_stmt : IF expr stmt ELSE stmt
  61          | IF expr stmt

  62  continue_stmt : CONTINUE

  63  break_stmt : BREAK

  64  return_stmt : RETURN COPY expr
  65              | RETURN REF expr
  66              | RETURN PASS expr

  67  assignment_stmt : expr COPIES expr
  68                  | expr REFS expr

  69  try_catch_stmt : TRY block_stmt catch_item_list CATCH '*' AS IDENTIFIER block_stmt
  70                 | TRY block_stmt CATCH '*' AS IDENTIFIER block_stmt
  71                 | TRY block_stmt catch_item_list

  72  catch_item_list : catch_item ',' catch_item_list
  73                  | catch_item

  74  catch_item : CATCH expr AS IDENTIFIER block_stmt

  75  signal_stmt : SIGNAL expr BECAUSE expr

  76  var_stmt : VAR IDENTIFIER '=' expr

  77  expr : assignment

  78  assignment : inline_if '=' assignment
  79             | inline_if

  80  inline_if : WHEN new THEN new ELSE new
  81            | new

  82  new : NEW expr '(' expr_list ')'
  83      | NEW expr
  84      | logical_or

  85  logical_or : logical_or OR logical_and
  86             | logical_and

  87  logical_and : logical_and AND bitwise_or
  88              | bitwise_or

  89  bitwise_or : bitwise_or '|' bitwise_xor
  90             | bitwise_xor

  91  bitwise_xor : bitwise_xor '^' bitwise_and
  92              | bitwise_and

  93  bitwise_and : bitwise_and '&' equality
  94              | equality

  95  equality : equality EQ relational
  96           | equality NE relational
  97           | relational

  98  relational : relational LE sum
  99             | relational GE sum
 100             | relational '<' sum
 101             | relational '>' sum
 102             | sum

 103  sum : sum '+' bitwise_shift
 104      | sum '-' bitwise_shift
 105      | bitwise_shift

 106  bitwise_shift : bitwise_shift LSHIFT term
 107                | bitwise_shift RSHIFT term
 108                | term

 109  term : term '*' prefix_op
 110       | term '/' prefix_op
 111       | term '%' prefix_op
 112       | prefix_op

 113  prefix_op : '+' prefix_op
 114            | '-' prefix_op
 115            | NOT prefix_op
 116            | '~' prefix_op
 117            | primary

 118  primary : primary '(' expr_list ')'
 119          | primary '(' ')'
 120          | primary '[' expr ']'
 121          | primary '.' IDENTIFIER
 122          | primary ':' IDENTIFIER
 123          | elementary

 124  elementary : '(' expr ')'
 125             | literal

 126  literal : NULLV
 127          | BOOL
 128          | CHAR
 129          | INT
 130          | FLOAT
 131          | STRING
 132          | IDENTIFIER

 133  expr_list : expr_list ',' expr
 134            | expr

state 0
	$accept : . program $end  (0)
	program : .  (10)

	.  reduce 10

	program  goto 1


state 1
	$accept : program . $end  (0)
	program : program . import_stmt  (1)
	program : program . export_stmt  (2)
	program : program . global_variable_stmt  (3)
	program : program . function_stmt  (4)
	program : program . type_stmt  (5)
	program : program . method_stmt  (6)
	program : program . constructor_stmt  (7)
	program : program . destructor_stmt  (8)
	program : program . stmt  (9)

	$end  accept
	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	IMPORT  shift 9
	EXPORT  shift 10
	GLOBAL  shift 11
	FUNCTION  shift 12
	TYPE  shift 13
	METHOD  shift 14
	CONSTRUCTOR  shift 15
	DESTRUCTOR  shift 16
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	import_stmt  goto 34
	export_stmt  goto 35
	global_variable_stmt  goto 36
	function_stmt  goto 37
	type_stmt  goto 38
	method_stmt  goto 39
	constructor_stmt  goto 40
	destructor_stmt  goto 41
	stmt  goto 42
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 2
	literal : BOOL .  (127)

	.  reduce 127


state 3
	literal : CHAR .  (128)

	.  reduce 128


state 4
	literal : INT .  (129)

	.  reduce 129


state 5
	literal : FLOAT .  (130)

	.  reduce 130


state 6
	literal : STRING .  (131)

	.  reduce 131


state 7
	literal : IDENTIFIER .  (132)

	.  reduce 132


state 8
	literal : NULLV .  (126)

	.  reduce 126


state 9
	import_stmt : IMPORT . MODULE_PATH AS IDENTIFIER  (11)

	MODULE_PATH  shift 72
	.  error


state 10
	export_stmt : EXPORT . export_item_list  (12)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	export_item_list  goto 73
	export_item  goto 74
	expr  goto 75
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 11
	global_variable_stmt : GLOBAL . IDENTIFIER  (16)

	IDENTIFIER  shift 76
	.  error


state 12
	function_stmt : FUNCTION . IDENTIFIER '(' parameter_list ')' block_stmt  (17)
	function_stmt : FUNCTION . IDENTIFIER '(' ')' block_stmt  (18)

	IDENTIFIER  shift 77
	.  error


state 13
	type_stmt : TYPE . IDENTIFIER '{' PUBLIC member_list PRIVATE member_list '}'  (24)
	type_stmt : TYPE . IDENTIFIER '{' PUBLIC PRIVATE member_list '}'  (25)
	type_stmt : TYPE . IDENTIFIER '{' PUBLIC member_list PRIVATE '}'  (26)

	IDENTIFIER  shift 78
	.  error


state 14
	method_stmt : METHOD . IDENTIFIER '(' parameter_list ')' OF IDENTIFIER block_stmt  (31)

	IDENTIFIER  shift 79
	.  error


state 15
	constructor_stmt : CONSTRUCTOR . '(' parameter_list ')' OF IDENTIFIER block_stmt  (32)

	'('  shift 80
	.  error


state 16
	destructor_stmt : DESTRUCTOR . OF IDENTIFIER block_stmt  (33)

	OF  shift 81
	.  error


state 17
	continue_stmt : CONTINUE .  (62)

	.  reduce 62


state 18
	break_stmt : BREAK .  (63)

	.  reduce 63


state 19
	return_stmt : RETURN . COPY expr  (64)
	return_stmt : RETURN . REF expr  (65)
	return_stmt : RETURN . PASS expr  (66)

	COPY  shift 82
	REF  shift 83
	PASS  shift 84
	.  error


state 20
	var_stmt : VAR . IDENTIFIER '=' expr  (76)

	IDENTIFIER  shift 85
	.  error


state 21
	try_catch_stmt : TRY . block_stmt catch_item_list CATCH '*' AS IDENTIFIER block_stmt  (69)
	try_catch_stmt : TRY . block_stmt CATCH '*' AS IDENTIFIER block_stmt  (70)
	try_catch_stmt : TRY . block_stmt catch_item_list  (71)

	'{'  shift 29
	.  error

	block_stmt  goto 86


state 22
	signal_stmt : SIGNAL . expr BECAUSE expr  (75)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 87
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 23
	if_stmt : IF . expr stmt ELSE stmt  (60)
	if_stmt : IF . expr stmt  (61)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 88
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 24
	while_stmt : WHILE . expr stmt  (51)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 89
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 25
	for_stmt : FOR . expr ';' expr ';' expr stmt  (52)
	for_stmt : FOR . ';' expr ';' expr stmt  (53)
	for_stmt : FOR . expr ';' ';' expr stmt  (54)
	for_stmt : FOR . expr ';' expr ';' stmt  (55)
	for_stmt : FOR . ';' ';' expr stmt  (56)
	for_stmt : FOR . ';' expr ';' stmt  (57)
	for_stmt : FOR . expr ';' ';' stmt  (58)
	for_stmt : FOR . ';' ';' stmt  (59)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	';'  shift 90
	.  error

	expr  goto 91
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 26
	inline_if : WHEN . new THEN new ELSE new  (80)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	new  goto 92
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 27
	new : NEW . expr '(' expr_list ')'  (82)
	new : NEW . expr  (83)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 93
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 28
	prefix_op : NOT . prefix_op  (115)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	prefix_op  goto 94
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 29
	block_stmt : '{' . stmt_list '}'  (47)
	block_stmt : '{' . '}'  (48)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'}'  shift 95
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 96
	block_stmt  goto 43
	stmt_list  goto 97
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 30
	prefix_op : '+' . prefix_op  (113)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	prefix_op  goto 98
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 31
	prefix_op : '-' . prefix_op  (114)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	prefix_op  goto 99
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 32
	prefix_op : '~' . prefix_op  (116)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	prefix_op  goto 100
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 33
	elementary : '(' . expr ')'  (124)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 101
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 34
	program : program import_stmt .  (1)

	.  reduce 1


state 35
	program : program export_stmt .  (2)

	.  reduce 2


state 36
	program : program global_variable_stmt .  (3)

	.  reduce 3


state 37
	program : program function_stmt .  (4)

	.  reduce 4


state 38
	program : program type_stmt .  (5)

	.  reduce 5


state 39
	program : program method_stmt .  (6)

	.  reduce 6


state 40
	program : program constructor_stmt .  (7)

	.  reduce 7


state 41
	program : program destructor_stmt .  (8)

	.  reduce 8


state 42
	program : program stmt .  (9)
	stmt : stmt . ';'  (46)

	';'  shift 102
	$end  reduce 9
	BOOL  reduce 9
	CHAR  reduce 9
	INT  reduce 9
	FLOAT  reduce 9
	STRING  reduce 9
	IDENTIFIER  reduce 9
	NULLV  reduce 9
	IMPORT  reduce 9
	EXPORT  reduce 9
	GLOBAL  reduce 9
	FUNCTION  reduce 9
	TYPE  reduce 9
	METHOD  reduce 9
	CONSTRUCTOR  reduce 9
	DESTRUCTOR  reduce 9
	CONTINUE  reduce 9
	BREAK  reduce 9
	RETURN  reduce 9
	VAR  reduce 9
	TRY  reduce 9
	SIGNAL  reduce 9
	IF  reduce 9
	WHILE  reduce 9
	FOR  reduce 9
	WHEN  reduce 9
	NEW  reduce 9
	NOT  reduce 9
	'{'  reduce 9
	'+'  reduce 9
	'-'  reduce 9
	'~'  reduce 9
	'('  reduce 9


state 43
	stmt : block_stmt .  (35)

	.  reduce 35


state 44
	stmt : while_stmt .  (36)

	.  reduce 36


state 45
	stmt : for_stmt .  (37)

	.  reduce 37


state 46
	stmt : if_stmt .  (38)

	.  reduce 38


state 47
	stmt : continue_stmt .  (39)

	.  reduce 39


state 48
	stmt : break_stmt .  (40)

	.  reduce 40


state 49
	stmt : return_stmt .  (41)

	.  reduce 41


state 50
	stmt : assignment_stmt .  (42)

	.  reduce 42


state 51
	stmt : try_catch_stmt .  (43)

	.  reduce 43


state 52
	stmt : signal_stmt .  (44)

	.  reduce 44


state 53
	stmt : var_stmt .  (45)

	.  reduce 45


state 54
	stmt : expr .  (34)
	assignment_stmt : expr . COPIES expr  (67)
	assignment_stmt : expr . REFS expr  (68)

	COPIES  shift 103
	REFS  shift 104
	$end  reduce 34
	BOOL  reduce 34
	CHAR  reduce 34
	INT  reduce 34
	FLOAT  reduce 34
	STRING  reduce 34
	IDENTIFIER  reduce 34
	NULLV  reduce 34
	IMPORT  reduce 34
	EXPORT  reduce 34
	GLOBAL  reduce 34
	FUNCTION  reduce 34
	TYPE  reduce 34
	METHOD  reduce 34
	CONSTRUCTOR  reduce 34
	DESTRUCTOR  reduce 34
	CONTINUE  reduce 34
	BREAK  reduce 34
	RETURN  reduce 34
	VAR  reduce 34
	TRY  reduce 34
	SIGNAL  reduce 34
	IF  reduce 34
	ELSE  reduce 34
	WHILE  reduce 34
	FOR  reduce 34
	WHEN  reduce 34
	NEW  reduce 34
	NOT  reduce 34
	'{'  reduce 34
	'}'  reduce 34
	'+'  reduce 34
	'-'  reduce 34
	'~'  reduce 34
	'('  reduce 34
	';'  reduce 34


state 55
	expr : assignment .  (77)

	.  reduce 77


56: shift/reduce conflict (shift 105, reduce 79) on '='
state 56
	assignment : inline_if . '=' assignment  (78)
	assignment : inline_if .  (79)

	'='  shift 105
	$end  reduce 79
	BOOL  reduce 79
	CHAR  reduce 79
	INT  reduce 79
	FLOAT  reduce 79
	STRING  reduce 79
	IDENTIFIER  reduce 79
	NULLV  reduce 79
	IMPORT  reduce 79
	EXPORT  reduce 79
	GLOBAL  reduce 79
	FUNCTION  reduce 79
	TYPE  reduce 79
	METHOD  reduce 79
	CONSTRUCTOR  reduce 79
	DESTRUCTOR  reduce 79
	CONTINUE  reduce 79
	BREAK  reduce 79
	RETURN  reduce 79
	VAR  reduce 79
	TRY  reduce 79
	SIGNAL  reduce 79
	BECAUSE  reduce 79
	IF  reduce 79
	ELSE  reduce 79
	WHILE  reduce 79
	FOR  reduce 79
	WHEN  reduce 79
	THEN  reduce 79
	NEW  reduce 79
	NOT  reduce 79
	COPIES  reduce 79
	REFS  reduce 79
	AS  reduce 79
	'{'  reduce 79
	'}'  reduce 79
	'+'  reduce 79
	'-'  reduce 79
	'~'  reduce 79
	'('  reduce 79
	')'  reduce 79
	','  reduce 79
	';'  reduce 79
	']'  reduce 79


state 57
	inline_if : new .  (81)

	.  reduce 81


state 58
	new : logical_or .  (84)
	logical_or : logical_or . OR logical_and  (85)

	OR  shift 106
	$end  reduce 84
	BOOL  reduce 84
	CHAR  reduce 84
	INT  reduce 84
	FLOAT  reduce 84
	STRING  reduce 84
	IDENTIFIER  reduce 84
	NULLV  reduce 84
	IMPORT  reduce 84
	EXPORT  reduce 84
	GLOBAL  reduce 84
	FUNCTION  reduce 84
	TYPE  reduce 84
	METHOD  reduce 84
	CONSTRUCTOR  reduce 84
	DESTRUCTOR  reduce 84
	CONTINUE  reduce 84
	BREAK  reduce 84
	RETURN  reduce 84
	VAR  reduce 84
	TRY  reduce 84
	SIGNAL  reduce 84
	BECAUSE  reduce 84
	IF  reduce 84
	ELSE  reduce 84
	WHILE  reduce 84
	FOR  reduce 84
	WHEN  reduce 84
	THEN  reduce 84
	NEW  reduce 84
	NOT  reduce 84
	COPIES  reduce 84
	REFS  reduce 84
	AS  reduce 84
	'{'  reduce 84
	'}'  reduce 84
	'+'  reduce 84
	'-'  reduce 84
	'~'  reduce 84
	'('  reduce 84
	')'  reduce 84
	','  reduce 84
	';'  reduce 84
	'='  reduce 84
	']'  reduce 84


state 59
	logical_or : logical_and .  (86)
	logical_and : logical_and . AND bitwise_or  (87)

	AND  shift 107
	$end  reduce 86
	BOOL  reduce 86
	CHAR  reduce 86
	INT  reduce 86
	FLOAT  reduce 86
	STRING  reduce 86
	IDENTIFIER  reduce 86
	NULLV  reduce 86
	IMPORT  reduce 86
	EXPORT  reduce 86
	GLOBAL  reduce 86
	FUNCTION  reduce 86
	TYPE  reduce 86
	METHOD  reduce 86
	CONSTRUCTOR  reduce 86
	DESTRUCTOR  reduce 86
	CONTINUE  reduce 86
	BREAK  reduce 86
	RETURN  reduce 86
	VAR  reduce 86
	TRY  reduce 86
	SIGNAL  reduce 86
	BECAUSE  reduce 86
	IF  reduce 86
	ELSE  reduce 86
	WHILE  reduce 86
	FOR  reduce 86
	WHEN  reduce 86
	THEN  reduce 86
	NEW  reduce 86
	OR  reduce 86
	NOT  reduce 86
	COPIES  reduce 86
	REFS  reduce 86
	AS  reduce 86
	'{'  reduce 86
	'}'  reduce 86
	'+'  reduce 86
	'-'  reduce 86
	'~'  reduce 86
	'('  reduce 86
	')'  reduce 86
	','  reduce 86
	';'  reduce 86
	'='  reduce 86
	']'  reduce 86


state 60
	logical_and : bitwise_or .  (88)
	bitwise_or : bitwise_or . '|' bitwise_xor  (89)

	'|'  shift 108
	$end  reduce 88
	BOOL  reduce 88
	CHAR  reduce 88
	INT  reduce 88
	FLOAT  reduce 88
	STRING  reduce 88
	IDENTIFIER  reduce 88
	NULLV  reduce 88
	IMPORT  reduce 88
	EXPORT  reduce 88
	GLOBAL  reduce 88
	FUNCTION  reduce 88
	TYPE  reduce 88
	METHOD  reduce 88
	CONSTRUCTOR  reduce 88
	DESTRUCTOR  reduce 88
	CONTINUE  reduce 88
	BREAK  reduce 88
	RETURN  reduce 88
	VAR  reduce 88
	TRY  reduce 88
	SIGNAL  reduce 88
	BECAUSE  reduce 88
	IF  reduce 88
	ELSE  reduce 88
	WHILE  reduce 88
	FOR  reduce 88
	WHEN  reduce 88
	THEN  reduce 88
	NEW  reduce 88
	OR  reduce 88
	AND  reduce 88
	NOT  reduce 88
	COPIES  reduce 88
	REFS  reduce 88
	AS  reduce 88
	'{'  reduce 88
	'}'  reduce 88
	'+'  reduce 88
	'-'  reduce 88
	'~'  reduce 88
	'('  reduce 88
	')'  reduce 88
	','  reduce 88
	';'  reduce 88
	'='  reduce 88
	']'  reduce 88


state 61
	bitwise_or : bitwise_xor .  (90)
	bitwise_xor : bitwise_xor . '^' bitwise_and  (91)

	'^'  shift 109
	$end  reduce 90
	BOOL  reduce 90
	CHAR  reduce 90
	INT  reduce 90
	FLOAT  reduce 90
	STRING  reduce 90
	IDENTIFIER  reduce 90
	NULLV  reduce 90
	IMPORT  reduce 90
	EXPORT  reduce 90
	GLOBAL  reduce 90
	FUNCTION  reduce 90
	TYPE  reduce 90
	METHOD  reduce 90
	CONSTRUCTOR  reduce 90
	DESTRUCTOR  reduce 90
	CONTINUE  reduce 90
	BREAK  reduce 90
	RETURN  reduce 90
	VAR  reduce 90
	TRY  reduce 90
	SIGNAL  reduce 90
	BECAUSE  reduce 90
	IF  reduce 90
	ELSE  reduce 90
	WHILE  reduce 90
	FOR  reduce 90
	WHEN  reduce 90
	THEN  reduce 90
	NEW  reduce 90
	OR  reduce 90
	AND  reduce 90
	NOT  reduce 90
	COPIES  reduce 90
	REFS  reduce 90
	AS  reduce 90
	'{'  reduce 90
	'}'  reduce 90
	'+'  reduce 90
	'-'  reduce 90
	'~'  reduce 90
	'('  reduce 90
	')'  reduce 90
	','  reduce 90
	';'  reduce 90
	'='  reduce 90
	'|'  reduce 90
	']'  reduce 90


state 62
	bitwise_xor : bitwise_and .  (92)
	bitwise_and : bitwise_and . '&' equality  (93)

	'&'  shift 110
	$end  reduce 92
	BOOL  reduce 92
	CHAR  reduce 92
	INT  reduce 92
	FLOAT  reduce 92
	STRING  reduce 92
	IDENTIFIER  reduce 92
	NULLV  reduce 92
	IMPORT  reduce 92
	EXPORT  reduce 92
	GLOBAL  reduce 92
	FUNCTION  reduce 92
	TYPE  reduce 92
	METHOD  reduce 92
	CONSTRUCTOR  reduce 92
	DESTRUCTOR  reduce 92
	CONTINUE  reduce 92
	BREAK  reduce 92
	RETURN  reduce 92
	VAR  reduce 92
	TRY  reduce 92
	SIGNAL  reduce 92
	BECAUSE  reduce 92
	IF  reduce 92
	ELSE  reduce 92
	WHILE  reduce 92
	FOR  reduce 92
	WHEN  reduce 92
	THEN  reduce 92
	NEW  reduce 92
	OR  reduce 92
	AND  reduce 92
	NOT  reduce 92
	COPIES  reduce 92
	REFS  reduce 92
	AS  reduce 92
	'{'  reduce 92
	'}'  reduce 92
	'+'  reduce 92
	'-'  reduce 92
	'~'  reduce 92
	'('  reduce 92
	')'  reduce 92
	','  reduce 92
	';'  reduce 92
	'='  reduce 92
	'|'  reduce 92
	'^'  reduce 92
	']'  reduce 92


state 63
	bitwise_and : equality .  (94)
	equality : equality . EQ relational  (95)
	equality : equality . NE relational  (96)

	EQ  shift 111
	NE  shift 112
	$end  reduce 94
	BOOL  reduce 94
	CHAR  reduce 94
	INT  reduce 94
	FLOAT  reduce 94
	STRING  reduce 94
	IDENTIFIER  reduce 94
	NULLV  reduce 94
	IMPORT  reduce 94
	EXPORT  reduce 94
	GLOBAL  reduce 94
	FUNCTION  reduce 94
	TYPE  reduce 94
	METHOD  reduce 94
	CONSTRUCTOR  reduce 94
	DESTRUCTOR  reduce 94
	CONTINUE  reduce 94
	BREAK  reduce 94
	RETURN  reduce 94
	VAR  reduce 94
	TRY  reduce 94
	SIGNAL  reduce 94
	BECAUSE  reduce 94
	IF  reduce 94
	ELSE  reduce 94
	WHILE  reduce 94
	FOR  reduce 94
	WHEN  reduce 94
	THEN  reduce 94
	NEW  reduce 94
	OR  reduce 94
	AND  reduce 94
	NOT  reduce 94
	COPIES  reduce 94
	REFS  reduce 94
	AS  reduce 94
	'{'  reduce 94
	'}'  reduce 94
	'+'  reduce 94
	'-'  reduce 94
	'~'  reduce 94
	'('  reduce 94
	')'  reduce 94
	','  reduce 94
	';'  reduce 94
	'='  reduce 94
	'|'  reduce 94
	'^'  reduce 94
	'&'  reduce 94
	']'  reduce 94


state 64
	equality : relational .  (97)
	relational : relational . LE sum  (98)
	relational : relational . GE sum  (99)
	relational : relational . '<' sum  (100)
	relational : relational . '>' sum  (101)

	LE  shift 113
	GE  shift 114
	'<'  shift 115
	'>'  shift 116
	$end  reduce 97
	BOOL  reduce 97
	CHAR  reduce 97
	INT  reduce 97
	FLOAT  reduce 97
	STRING  reduce 97
	IDENTIFIER  reduce 97
	NULLV  reduce 97
	IMPORT  reduce 97
	EXPORT  reduce 97
	GLOBAL  reduce 97
	FUNCTION  reduce 97
	TYPE  reduce 97
	METHOD  reduce 97
	CONSTRUCTOR  reduce 97
	DESTRUCTOR  reduce 97
	CONTINUE  reduce 97
	BREAK  reduce 97
	RETURN  reduce 97
	VAR  reduce 97
	TRY  reduce 97
	SIGNAL  reduce 97
	BECAUSE  reduce 97
	IF  reduce 97
	ELSE  reduce 97
	WHILE  reduce 97
	FOR  reduce 97
	WHEN  reduce 97
	THEN  reduce 97
	NEW  reduce 97
	OR  reduce 97
	AND  reduce 97
	NOT  reduce 97
	COPIES  reduce 97
	REFS  reduce 97
	AS  reduce 97
	EQ  reduce 97
	NE  reduce 97
	'{'  reduce 97
	'}'  reduce 97
	'+'  reduce 97
	'-'  reduce 97
	'~'  reduce 97
	'('  reduce 97
	')'  reduce 97
	','  reduce 97
	';'  reduce 97
	'='  reduce 97
	'|'  reduce 97
	'^'  reduce 97
	'&'  reduce 97
	']'  reduce 97


65: shift/reduce conflict (shift 117, reduce 102) on '+'
65: shift/reduce conflict (shift 118, reduce 102) on '-'
state 65
	relational : sum .  (102)
	sum : sum . '+' bitwise_shift  (103)
	sum : sum . '-' bitwise_shift  (104)

	'+'  shift 117
	'-'  shift 118
	$end  reduce 102
	BOOL  reduce 102
	CHAR  reduce 102
	INT  reduce 102
	FLOAT  reduce 102
	STRING  reduce 102
	IDENTIFIER  reduce 102
	NULLV  reduce 102
	IMPORT  reduce 102
	EXPORT  reduce 102
	GLOBAL  reduce 102
	FUNCTION  reduce 102
	TYPE  reduce 102
	METHOD  reduce 102
	CONSTRUCTOR  reduce 102
	DESTRUCTOR  reduce 102
	CONTINUE  reduce 102
	BREAK  reduce 102
	RETURN  reduce 102
	VAR  reduce 102
	TRY  reduce 102
	SIGNAL  reduce 102
	BECAUSE  reduce 102
	IF  reduce 102
	ELSE  reduce 102
	WHILE  reduce 102
	FOR  reduce 102
	WHEN  reduce 102
	THEN  reduce 102
	NEW  reduce 102
	OR  reduce 102
	AND  reduce 102
	NOT  reduce 102
	COPIES  reduce 102
	REFS  reduce 102
	AS  reduce 102
	EQ  reduce 102
	NE  reduce 102
	LE  reduce 102
	GE  reduce 102
	'{'  reduce 102
	'}'  reduce 102
	'~'  reduce 102
	'('  reduce 102
	')'  reduce 102
	','  reduce 102
	';'  reduce 102
	'='  reduce 102
	'|'  reduce 102
	'^'  reduce 102
	'&'  reduce 102
	'<'  reduce 102
	'>'  reduce 102
	']'  reduce 102


state 66
	sum : bitwise_shift .  (105)
	bitwise_shift : bitwise_shift . LSHIFT term  (106)
	bitwise_shift : bitwise_shift . RSHIFT term  (107)

	LSHIFT  shift 119
	RSHIFT  shift 120
	$end  reduce 105
	BOOL  reduce 105
	CHAR  reduce 105
	INT  reduce 105
	FLOAT  reduce 105
	STRING  reduce 105
	IDENTIFIER  reduce 105
	NULLV  reduce 105
	IMPORT  reduce 105
	EXPORT  reduce 105
	GLOBAL  reduce 105
	FUNCTION  reduce 105
	TYPE  reduce 105
	METHOD  reduce 105
	CONSTRUCTOR  reduce 105
	DESTRUCTOR  reduce 105
	CONTINUE  reduce 105
	BREAK  reduce 105
	RETURN  reduce 105
	VAR  reduce 105
	TRY  reduce 105
	SIGNAL  reduce 105
	BECAUSE  reduce 105
	IF  reduce 105
	ELSE  reduce 105
	WHILE  reduce 105
	FOR  reduce 105
	WHEN  reduce 105
	THEN  reduce 105
	NEW  reduce 105
	OR  reduce 105
	AND  reduce 105
	NOT  reduce 105
	COPIES  reduce 105
	REFS  reduce 105
	AS  reduce 105
	EQ  reduce 105
	NE  reduce 105
	LE  reduce 105
	GE  reduce 105
	'{'  reduce 105
	'}'  reduce 105
	'+'  reduce 105
	'-'  reduce 105
	'~'  reduce 105
	'('  reduce 105
	')'  reduce 105
	','  reduce 105
	';'  reduce 105
	'='  reduce 105
	'|'  reduce 105
	'^'  reduce 105
	'&'  reduce 105
	'<'  reduce 105
	'>'  reduce 105
	']'  reduce 105


state 67
	bitwise_shift : term .  (108)
	term : term . '*' prefix_op  (109)
	term : term . '/' prefix_op  (110)
	term : term . '%' prefix_op  (111)

	'*'  shift 121
	'/'  shift 122
	'%'  shift 123
	$end  reduce 108
	BOOL  reduce 108
	CHAR  reduce 108
	INT  reduce 108
	FLOAT  reduce 108
	STRING  reduce 108
	IDENTIFIER  reduce 108
	NULLV  reduce 108
	IMPORT  reduce 108
	EXPORT  reduce 108
	GLOBAL  reduce 108
	FUNCTION  reduce 108
	TYPE  reduce 108
	METHOD  reduce 108
	CONSTRUCTOR  reduce 108
	DESTRUCTOR  reduce 108
	CONTINUE  reduce 108
	BREAK  reduce 108
	RETURN  reduce 108
	VAR  reduce 108
	TRY  reduce 108
	SIGNAL  reduce 108
	BECAUSE  reduce 108
	IF  reduce 108
	ELSE  reduce 108
	WHILE  reduce 108
	FOR  reduce 108
	WHEN  reduce 108
	THEN  reduce 108
	NEW  reduce 108
	OR  reduce 108
	AND  reduce 108
	NOT  reduce 108
	COPIES  reduce 108
	REFS  reduce 108
	AS  reduce 108
	LSHIFT  reduce 108
	RSHIFT  reduce 108
	EQ  reduce 108
	NE  reduce 108
	LE  reduce 108
	GE  reduce 108
	'{'  reduce 108
	'}'  reduce 108
	'+'  reduce 108
	'-'  reduce 108
	'~'  reduce 108
	'('  reduce 108
	')'  reduce 108
	','  reduce 108
	';'  reduce 108
	'='  reduce 108
	'|'  reduce 108
	'^'  reduce 108
	'&'  reduce 108
	'<'  reduce 108
	'>'  reduce 108
	']'  reduce 108


state 68
	term : prefix_op .  (112)

	.  reduce 112


69: shift/reduce conflict (shift 124, reduce 117) on '('
state 69
	prefix_op : primary .  (117)
	primary : primary . '(' expr_list ')'  (118)
	primary : primary . '(' ')'  (119)
	primary : primary . '[' expr ']'  (120)
	primary : primary . '.' IDENTIFIER  (121)
	primary : primary . ':' IDENTIFIER  (122)

	'('  shift 124
	'['  shift 125
	'.'  shift 126
	':'  shift 127
	$end  reduce 117
	BOOL  reduce 117
	CHAR  reduce 117
	INT  reduce 117
	FLOAT  reduce 117
	STRING  reduce 117
	IDENTIFIER  reduce 117
	NULLV  reduce 117
	IMPORT  reduce 117
	EXPORT  reduce 117
	GLOBAL  reduce 117
	FUNCTION  reduce 117
	TYPE  reduce 117
	METHOD  reduce 117
	CONSTRUCTOR  reduce 117
	DESTRUCTOR  reduce 117
	CONTINUE  reduce 117
	BREAK  reduce 117
	RETURN  reduce 117
	VAR  reduce 117
	TRY  reduce 117
	SIGNAL  reduce 117
	BECAUSE  reduce 117
	IF  reduce 117
	ELSE  reduce 117
	WHILE  reduce 117
	FOR  reduce 117
	WHEN  reduce 117
	THEN  reduce 117
	NEW  reduce 117
	OR  reduce 117
	AND  reduce 117
	NOT  reduce 117
	COPIES  reduce 117
	REFS  reduce 117
	AS  reduce 117
	LSHIFT  reduce 117
	RSHIFT  reduce 117
	EQ  reduce 117
	NE  reduce 117
	LE  reduce 117
	GE  reduce 117
	'{'  reduce 117
	'}'  reduce 117
	'+'  reduce 117
	'-'  reduce 117
	'*'  reduce 117
	'/'  reduce 117
	'%'  reduce 117
	'~'  reduce 117
	')'  reduce 117
	','  reduce 117
	';'  reduce 117
	'='  reduce 117
	'|'  reduce 117
	'^'  reduce 117
	'&'  reduce 117
	'<'  reduce 117
	'>'  reduce 117
	']'  reduce 117


state 70
	primary : elementary .  (123)

	.  reduce 123


state 71
	elementary : literal .  (125)

	.  reduce 125


state 72
	import_stmt : IMPORT MODULE_PATH . AS IDENTIFIER  (11)

	AS  shift 128
	.  error


state 73
	export_stmt : EXPORT export_item_list .  (12)
	export_item_list : export_item_list . ',' export_item  (13)

	','  shift 129
	$end  reduce 12
	BOOL  reduce 12
	CHAR  reduce 12
	INT  reduce 12
	FLOAT  reduce 12
	STRING  reduce 12
	IDENTIFIER  reduce 12
	NULLV  reduce 12
	IMPORT  reduce 12
	EXPORT  reduce 12
	GLOBAL  reduce 12
	FUNCTION  reduce 12
	TYPE  reduce 12
	METHOD  reduce 12
	CONSTRUCTOR  reduce 12
	DESTRUCTOR  reduce 12
	CONTINUE  reduce 12
	BREAK  reduce 12
	RETURN  reduce 12
	VAR  reduce 12
	TRY  reduce 12
	SIGNAL  reduce 12
	IF  reduce 12
	WHILE  reduce 12
	FOR  reduce 12
	WHEN  reduce 12
	NEW  reduce 12
	NOT  reduce 12
	'{'  reduce 12
	'+'  reduce 12
	'-'  reduce 12
	'~'  reduce 12
	'('  reduce 12


state 74
	export_item_list : export_item .  (14)

	.  reduce 14


state 75
	export_item : expr . AS IDENTIFIER  (15)

	AS  shift 130
	.  error


state 76
	global_variable_stmt : GLOBAL IDENTIFIER .  (16)

	.  reduce 16


state 77
	function_stmt : FUNCTION IDENTIFIER . '(' parameter_list ')' block_stmt  (17)
	function_stmt : FUNCTION IDENTIFIER . '(' ')' block_stmt  (18)

	'('  shift 131
	.  error


state 78
	type_stmt : TYPE IDENTIFIER . '{' PUBLIC member_list PRIVATE member_list '}'  (24)
	type_stmt : TYPE IDENTIFIER . '{' PUBLIC PRIVATE member_list '}'  (25)
	type_stmt : TYPE IDENTIFIER . '{' PUBLIC member_list PRIVATE '}'  (26)

	'{'  shift 132
	.  error


state 79
	method_stmt : METHOD IDENTIFIER . '(' parameter_list ')' OF IDENTIFIER block_stmt  (31)

	'('  shift 133
	.  error


state 80
	constructor_stmt : CONSTRUCTOR '(' . parameter_list ')' OF IDENTIFIER block_stmt  (32)

	COPY  shift 134
	REF  shift 135
	PASS  shift 136
	.  error

	parameter_list  goto 137
	parameter_item  goto 138


state 81
	destructor_stmt : DESTRUCTOR OF . IDENTIFIER block_stmt  (33)

	IDENTIFIER  shift 139
	.  error


state 82
	return_stmt : RETURN COPY . expr  (64)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 140
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 83
	return_stmt : RETURN REF . expr  (65)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 141
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 84
	return_stmt : RETURN PASS . expr  (66)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 142
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 85
	var_stmt : VAR IDENTIFIER . '=' expr  (76)

	'='  shift 143
	.  error


state 86
	try_catch_stmt : TRY block_stmt . catch_item_list CATCH '*' AS IDENTIFIER block_stmt  (69)
	try_catch_stmt : TRY block_stmt . CATCH '*' AS IDENTIFIER block_stmt  (70)
	try_catch_stmt : TRY block_stmt . catch_item_list  (71)

	CATCH  shift 144
	.  error

	catch_item_list  goto 145
	catch_item  goto 146


state 87
	signal_stmt : SIGNAL expr . BECAUSE expr  (75)

	BECAUSE  shift 147
	.  error


state 88
	if_stmt : IF expr . stmt ELSE stmt  (60)
	if_stmt : IF expr . stmt  (61)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 148
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 89
	while_stmt : WHILE expr . stmt  (51)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 149
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 90
	for_stmt : FOR ';' . expr ';' expr stmt  (53)
	for_stmt : FOR ';' . ';' expr stmt  (56)
	for_stmt : FOR ';' . expr ';' stmt  (57)
	for_stmt : FOR ';' . ';' stmt  (59)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	';'  shift 150
	.  error

	expr  goto 151
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 91
	for_stmt : FOR expr . ';' expr ';' expr stmt  (52)
	for_stmt : FOR expr . ';' ';' expr stmt  (54)
	for_stmt : FOR expr . ';' expr ';' stmt  (55)
	for_stmt : FOR expr . ';' ';' stmt  (58)

	';'  shift 152
	.  error


state 92
	inline_if : WHEN new . THEN new ELSE new  (80)

	THEN  shift 153
	.  error


93: shift/reduce conflict (shift 154, reduce 83) on '('
state 93
	new : NEW expr . '(' expr_list ')'  (82)
	new : NEW expr .  (83)

	'('  shift 154
	$end  reduce 83
	BOOL  reduce 83
	CHAR  reduce 83
	INT  reduce 83
	FLOAT  reduce 83
	STRING  reduce 83
	IDENTIFIER  reduce 83
	NULLV  reduce 83
	IMPORT  reduce 83
	EXPORT  reduce 83
	GLOBAL  reduce 83
	FUNCTION  reduce 83
	TYPE  reduce 83
	METHOD  reduce 83
	CONSTRUCTOR  reduce 83
	DESTRUCTOR  reduce 83
	CONTINUE  reduce 83
	BREAK  reduce 83
	RETURN  reduce 83
	VAR  reduce 83
	TRY  reduce 83
	SIGNAL  reduce 83
	BECAUSE  reduce 83
	IF  reduce 83
	ELSE  reduce 83
	WHILE  reduce 83
	FOR  reduce 83
	WHEN  reduce 83
	THEN  reduce 83
	NEW  reduce 83
	NOT  reduce 83
	COPIES  reduce 83
	REFS  reduce 83
	AS  reduce 83
	'{'  reduce 83
	'}'  reduce 83
	'+'  reduce 83
	'-'  reduce 83
	'~'  reduce 83
	')'  reduce 83
	','  reduce 83
	';'  reduce 83
	'='  reduce 83
	']'  reduce 83


state 94
	prefix_op : NOT prefix_op .  (115)

	.  reduce 115


state 95
	block_stmt : '{' '}' .  (48)

	.  reduce 48


state 96
	stmt : stmt . ';'  (46)
	stmt_list : stmt .  (50)

	';'  shift 102
	BOOL  reduce 50
	CHAR  reduce 50
	INT  reduce 50
	FLOAT  reduce 50
	STRING  reduce 50
	IDENTIFIER  reduce 50
	NULLV  reduce 50
	CONTINUE  reduce 50
	BREAK  reduce 50
	RETURN  reduce 50
	VAR  reduce 50
	TRY  reduce 50
	SIGNAL  reduce 50
	IF  reduce 50
	WHILE  reduce 50
	FOR  reduce 50
	WHEN  reduce 50
	NEW  reduce 50
	NOT  reduce 50
	'{'  reduce 50
	'}'  reduce 50
	'+'  reduce 50
	'-'  reduce 50
	'~'  reduce 50
	'('  reduce 50


state 97
	block_stmt : '{' stmt_list . '}'  (47)
	stmt_list : stmt_list . stmt  (49)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'}'  shift 155
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 156
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 98
	prefix_op : '+' prefix_op .  (113)

	.  reduce 113


state 99
	prefix_op : '-' prefix_op .  (114)

	.  reduce 114


state 100
	prefix_op : '~' prefix_op .  (116)

	.  reduce 116


state 101
	elementary : '(' expr . ')'  (124)

	')'  shift 157
	.  error


state 102
	stmt : stmt ';' .  (46)

	.  reduce 46


state 103
	assignment_stmt : expr COPIES . expr  (67)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 158
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 104
	assignment_stmt : expr REFS . expr  (68)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 159
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 105
	assignment : inline_if '=' . assignment  (78)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	assignment  goto 160
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 106
	logical_or : logical_or OR . logical_and  (85)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	logical_and  goto 161
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 107
	logical_and : logical_and AND . bitwise_or  (87)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	bitwise_or  goto 162
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 108
	bitwise_or : bitwise_or '|' . bitwise_xor  (89)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	bitwise_xor  goto 163
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 109
	bitwise_xor : bitwise_xor '^' . bitwise_and  (91)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	bitwise_and  goto 164
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 110
	bitwise_and : bitwise_and '&' . equality  (93)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	equality  goto 165
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 111
	equality : equality EQ . relational  (95)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	relational  goto 166
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 112
	equality : equality NE . relational  (96)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	relational  goto 167
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 113
	relational : relational LE . sum  (98)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	sum  goto 168
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 114
	relational : relational GE . sum  (99)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	sum  goto 169
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 115
	relational : relational '<' . sum  (100)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	sum  goto 170
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 116
	relational : relational '>' . sum  (101)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	sum  goto 171
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 117
	sum : sum '+' . bitwise_shift  (103)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	bitwise_shift  goto 172
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 118
	sum : sum '-' . bitwise_shift  (104)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	bitwise_shift  goto 173
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 119
	bitwise_shift : bitwise_shift LSHIFT . term  (106)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	term  goto 174
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 120
	bitwise_shift : bitwise_shift RSHIFT . term  (107)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	term  goto 175
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 121
	term : term '*' . prefix_op  (109)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	prefix_op  goto 176
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 122
	term : term '/' . prefix_op  (110)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	prefix_op  goto 177
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 123
	term : term '%' . prefix_op  (111)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	prefix_op  goto 178
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 124
	primary : primary '(' . expr_list ')'  (118)
	primary : primary '(' . ')'  (119)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	')'  shift 179
	.  error

	expr  goto 180
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71
	expr_list  goto 181


state 125
	primary : primary '[' . expr ']'  (120)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 182
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 126
	primary : primary '.' . IDENTIFIER  (121)

	IDENTIFIER  shift 183
	.  error


state 127
	primary : primary ':' . IDENTIFIER  (122)

	IDENTIFIER  shift 184
	.  error


state 128
	import_stmt : IMPORT MODULE_PATH AS . IDENTIFIER  (11)

	IDENTIFIER  shift 185
	.  error


state 129
	export_item_list : export_item_list ',' . export_item  (13)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	export_item  goto 186
	expr  goto 75
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 130
	export_item : expr AS . IDENTIFIER  (15)

	IDENTIFIER  shift 187
	.  error


state 131
	function_stmt : FUNCTION IDENTIFIER '(' . parameter_list ')' block_stmt  (17)
	function_stmt : FUNCTION IDENTIFIER '(' . ')' block_stmt  (18)

	COPY  shift 134
	REF  shift 135
	PASS  shift 136
	')'  shift 188
	.  error

	parameter_list  goto 189
	parameter_item  goto 138


state 132
	type_stmt : TYPE IDENTIFIER '{' . PUBLIC member_list PRIVATE member_list '}'  (24)
	type_stmt : TYPE IDENTIFIER '{' . PUBLIC PRIVATE member_list '}'  (25)
	type_stmt : TYPE IDENTIFIER '{' . PUBLIC member_list PRIVATE '}'  (26)

	PUBLIC  shift 190
	.  error


state 133
	method_stmt : METHOD IDENTIFIER '(' . parameter_list ')' OF IDENTIFIER block_stmt  (31)

	COPY  shift 134
	REF  shift 135
	PASS  shift 136
	.  error

	parameter_list  goto 191
	parameter_item  goto 138


state 134
	parameter_item : COPY . IDENTIFIER  (21)

	IDENTIFIER  shift 192
	.  error


state 135
	parameter_item : REF . IDENTIFIER  (22)

	IDENTIFIER  shift 193
	.  error


state 136
	parameter_item : PASS . IDENTIFIER  (23)

	IDENTIFIER  shift 194
	.  error


state 137
	parameter_list : parameter_list . ',' parameter_item  (19)
	constructor_stmt : CONSTRUCTOR '(' parameter_list . ')' OF IDENTIFIER block_stmt  (32)

	')'  shift 195
	','  shift 196
	.  error


state 138
	parameter_list : parameter_item .  (20)

	.  reduce 20


state 139
	destructor_stmt : DESTRUCTOR OF IDENTIFIER . block_stmt  (33)

	'{'  shift 29
	.  error

	block_stmt  goto 197


state 140
	return_stmt : RETURN COPY expr .  (64)

	.  reduce 64


state 141
	return_stmt : RETURN REF expr .  (65)

	.  reduce 65


state 142
	return_stmt : RETURN PASS expr .  (66)

	.  reduce 66


state 143
	var_stmt : VAR IDENTIFIER '=' . expr  (76)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 198
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 144
	try_catch_stmt : TRY block_stmt CATCH . '*' AS IDENTIFIER block_stmt  (70)
	catch_item : CATCH . expr AS IDENTIFIER block_stmt  (74)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'*'  shift 199
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 200
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 145
	try_catch_stmt : TRY block_stmt catch_item_list . CATCH '*' AS IDENTIFIER block_stmt  (69)
	try_catch_stmt : TRY block_stmt catch_item_list .  (71)

	CATCH  shift 201
	$end  reduce 71
	BOOL  reduce 71
	CHAR  reduce 71
	INT  reduce 71
	FLOAT  reduce 71
	STRING  reduce 71
	IDENTIFIER  reduce 71
	NULLV  reduce 71
	IMPORT  reduce 71
	EXPORT  reduce 71
	GLOBAL  reduce 71
	FUNCTION  reduce 71
	TYPE  reduce 71
	METHOD  reduce 71
	CONSTRUCTOR  reduce 71
	DESTRUCTOR  reduce 71
	CONTINUE  reduce 71
	BREAK  reduce 71
	RETURN  reduce 71
	VAR  reduce 71
	TRY  reduce 71
	SIGNAL  reduce 71
	IF  reduce 71
	ELSE  reduce 71
	WHILE  reduce 71
	FOR  reduce 71
	WHEN  reduce 71
	NEW  reduce 71
	NOT  reduce 71
	'{'  reduce 71
	'}'  reduce 71
	'+'  reduce 71
	'-'  reduce 71
	'~'  reduce 71
	'('  reduce 71
	';'  reduce 71


state 146
	catch_item_list : catch_item . ',' catch_item_list  (72)
	catch_item_list : catch_item .  (73)

	','  shift 202
	$end  reduce 73
	BOOL  reduce 73
	CHAR  reduce 73
	INT  reduce 73
	FLOAT  reduce 73
	STRING  reduce 73
	IDENTIFIER  reduce 73
	NULLV  reduce 73
	IMPORT  reduce 73
	EXPORT  reduce 73
	GLOBAL  reduce 73
	FUNCTION  reduce 73
	TYPE  reduce 73
	METHOD  reduce 73
	CONSTRUCTOR  reduce 73
	DESTRUCTOR  reduce 73
	CONTINUE  reduce 73
	BREAK  reduce 73
	RETURN  reduce 73
	VAR  reduce 73
	TRY  reduce 73
	CATCH  reduce 73
	SIGNAL  reduce 73
	IF  reduce 73
	ELSE  reduce 73
	WHILE  reduce 73
	FOR  reduce 73
	WHEN  reduce 73
	NEW  reduce 73
	NOT  reduce 73
	'{'  reduce 73
	'}'  reduce 73
	'+'  reduce 73
	'-'  reduce 73
	'~'  reduce 73
	'('  reduce 73
	';'  reduce 73


state 147
	signal_stmt : SIGNAL expr BECAUSE . expr  (75)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 203
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


148: shift/reduce conflict (shift 204, reduce 61) on ELSE
148: shift/reduce conflict (shift 102, reduce 61) on ';'
state 148
	stmt : stmt . ';'  (46)
	if_stmt : IF expr stmt . ELSE stmt  (60)
	if_stmt : IF expr stmt .  (61)

	ELSE  shift 204
	';'  shift 102
	$end  reduce 61
	BOOL  reduce 61
	CHAR  reduce 61
	INT  reduce 61
	FLOAT  reduce 61
	STRING  reduce 61
	IDENTIFIER  reduce 61
	NULLV  reduce 61
	IMPORT  reduce 61
	EXPORT  reduce 61
	GLOBAL  reduce 61
	FUNCTION  reduce 61
	TYPE  reduce 61
	METHOD  reduce 61
	CONSTRUCTOR  reduce 61
	DESTRUCTOR  reduce 61
	CONTINUE  reduce 61
	BREAK  reduce 61
	RETURN  reduce 61
	VAR  reduce 61
	TRY  reduce 61
	SIGNAL  reduce 61
	IF  reduce 61
	WHILE  reduce 61
	FOR  reduce 61
	WHEN  reduce 61
	NEW  reduce 61
	NOT  reduce 61
	'{'  reduce 61
	'}'  reduce 61
	'+'  reduce 61
	'-'  reduce 61
	'~'  reduce 61
	'('  reduce 61


149: shift/reduce conflict (shift 102, reduce 51) on ';'
state 149
	stmt : stmt . ';'  (46)
	while_stmt : WHILE expr stmt .  (51)

	';'  shift 102
	$end  reduce 51
	BOOL  reduce 51
	CHAR  reduce 51
	INT  reduce 51
	FLOAT  reduce 51
	STRING  reduce 51
	IDENTIFIER  reduce 51
	NULLV  reduce 51
	IMPORT  reduce 51
	EXPORT  reduce 51
	GLOBAL  reduce 51
	FUNCTION  reduce 51
	TYPE  reduce 51
	METHOD  reduce 51
	CONSTRUCTOR  reduce 51
	DESTRUCTOR  reduce 51
	CONTINUE  reduce 51
	BREAK  reduce 51
	RETURN  reduce 51
	VAR  reduce 51
	TRY  reduce 51
	SIGNAL  reduce 51
	IF  reduce 51
	ELSE  reduce 51
	WHILE  reduce 51
	FOR  reduce 51
	WHEN  reduce 51
	NEW  reduce 51
	NOT  reduce 51
	'{'  reduce 51
	'}'  reduce 51
	'+'  reduce 51
	'-'  reduce 51
	'~'  reduce 51
	'('  reduce 51


state 150
	for_stmt : FOR ';' ';' . expr stmt  (56)
	for_stmt : FOR ';' ';' . stmt  (59)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 205
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 206
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 151
	for_stmt : FOR ';' expr . ';' expr stmt  (53)
	for_stmt : FOR ';' expr . ';' stmt  (57)

	';'  shift 207
	.  error


state 152
	for_stmt : FOR expr ';' . expr ';' expr stmt  (52)
	for_stmt : FOR expr ';' . ';' expr stmt  (54)
	for_stmt : FOR expr ';' . expr ';' stmt  (55)
	for_stmt : FOR expr ';' . ';' stmt  (58)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	';'  shift 208
	.  error

	expr  goto 209
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 153
	inline_if : WHEN new THEN . new ELSE new  (80)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	new  goto 210
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 154
	new : NEW expr '(' . expr_list ')'  (82)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 180
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71
	expr_list  goto 211


state 155
	block_stmt : '{' stmt_list '}' .  (47)

	.  reduce 47


state 156
	stmt : stmt . ';'  (46)
	stmt_list : stmt_list stmt .  (49)

	';'  shift 102
	BOOL  reduce 49
	CHAR  reduce 49
	INT  reduce 49
	FLOAT  reduce 49
	STRING  reduce 49
	IDENTIFIER  reduce 49
	NULLV  reduce 49
	CONTINUE  reduce 49
	BREAK  reduce 49
	RETURN  reduce 49
	VAR  reduce 49
	TRY  reduce 49
	SIGNAL  reduce 49
	IF  reduce 49
	WHILE  reduce 49
	FOR  reduce 49
	WHEN  reduce 49
	NEW  reduce 49
	NOT  reduce 49
	'{'  reduce 49
	'}'  reduce 49
	'+'  reduce 49
	'-'  reduce 49
	'~'  reduce 49
	'('  reduce 49


state 157
	elementary : '(' expr ')' .  (124)

	.  reduce 124


state 158
	assignment_stmt : expr COPIES expr .  (67)

	.  reduce 67


state 159
	assignment_stmt : expr REFS expr .  (68)

	.  reduce 68


state 160
	assignment : inline_if '=' assignment .  (78)

	.  reduce 78


state 161
	logical_or : logical_or OR logical_and .  (85)
	logical_and : logical_and . AND bitwise_or  (87)

	AND  shift 107
	$end  reduce 85
	BOOL  reduce 85
	CHAR  reduce 85
	INT  reduce 85
	FLOAT  reduce 85
	STRING  reduce 85
	IDENTIFIER  reduce 85
	NULLV  reduce 85
	IMPORT  reduce 85
	EXPORT  reduce 85
	GLOBAL  reduce 85
	FUNCTION  reduce 85
	TYPE  reduce 85
	METHOD  reduce 85
	CONSTRUCTOR  reduce 85
	DESTRUCTOR  reduce 85
	CONTINUE  reduce 85
	BREAK  reduce 85
	RETURN  reduce 85
	VAR  reduce 85
	TRY  reduce 85
	SIGNAL  reduce 85
	BECAUSE  reduce 85
	IF  reduce 85
	ELSE  reduce 85
	WHILE  reduce 85
	FOR  reduce 85
	WHEN  reduce 85
	THEN  reduce 85
	NEW  reduce 85
	OR  reduce 85
	NOT  reduce 85
	COPIES  reduce 85
	REFS  reduce 85
	AS  reduce 85
	'{'  reduce 85
	'}'  reduce 85
	'+'  reduce 85
	'-'  reduce 85
	'~'  reduce 85
	'('  reduce 85
	')'  reduce 85
	','  reduce 85
	';'  reduce 85
	'='  reduce 85
	']'  reduce 85


state 162
	logical_and : logical_and AND bitwise_or .  (87)
	bitwise_or : bitwise_or . '|' bitwise_xor  (89)

	'|'  shift 108
	$end  reduce 87
	BOOL  reduce 87
	CHAR  reduce 87
	INT  reduce 87
	FLOAT  reduce 87
	STRING  reduce 87
	IDENTIFIER  reduce 87
	NULLV  reduce 87
	IMPORT  reduce 87
	EXPORT  reduce 87
	GLOBAL  reduce 87
	FUNCTION  reduce 87
	TYPE  reduce 87
	METHOD  reduce 87
	CONSTRUCTOR  reduce 87
	DESTRUCTOR  reduce 87
	CONTINUE  reduce 87
	BREAK  reduce 87
	RETURN  reduce 87
	VAR  reduce 87
	TRY  reduce 87
	SIGNAL  reduce 87
	BECAUSE  reduce 87
	IF  reduce 87
	ELSE  reduce 87
	WHILE  reduce 87
	FOR  reduce 87
	WHEN  reduce 87
	THEN  reduce 87
	NEW  reduce 87
	OR  reduce 87
	AND  reduce 87
	NOT  reduce 87
	COPIES  reduce 87
	REFS  reduce 87
	AS  reduce 87
	'{'  reduce 87
	'}'  reduce 87
	'+'  reduce 87
	'-'  reduce 87
	'~'  reduce 87
	'('  reduce 87
	')'  reduce 87
	','  reduce 87
	';'  reduce 87
	'='  reduce 87
	']'  reduce 87


state 163
	bitwise_or : bitwise_or '|' bitwise_xor .  (89)
	bitwise_xor : bitwise_xor . '^' bitwise_and  (91)

	'^'  shift 109
	$end  reduce 89
	BOOL  reduce 89
	CHAR  reduce 89
	INT  reduce 89
	FLOAT  reduce 89
	STRING  reduce 89
	IDENTIFIER  reduce 89
	NULLV  reduce 89
	IMPORT  reduce 89
	EXPORT  reduce 89
	GLOBAL  reduce 89
	FUNCTION  reduce 89
	TYPE  reduce 89
	METHOD  reduce 89
	CONSTRUCTOR  reduce 89
	DESTRUCTOR  reduce 89
	CONTINUE  reduce 89
	BREAK  reduce 89
	RETURN  reduce 89
	VAR  reduce 89
	TRY  reduce 89
	SIGNAL  reduce 89
	BECAUSE  reduce 89
	IF  reduce 89
	ELSE  reduce 89
	WHILE  reduce 89
	FOR  reduce 89
	WHEN  reduce 89
	THEN  reduce 89
	NEW  reduce 89
	OR  reduce 89
	AND  reduce 89
	NOT  reduce 89
	COPIES  reduce 89
	REFS  reduce 89
	AS  reduce 89
	'{'  reduce 89
	'}'  reduce 89
	'+'  reduce 89
	'-'  reduce 89
	'~'  reduce 89
	'('  reduce 89
	')'  reduce 89
	','  reduce 89
	';'  reduce 89
	'='  reduce 89
	'|'  reduce 89
	']'  reduce 89


state 164
	bitwise_xor : bitwise_xor '^' bitwise_and .  (91)
	bitwise_and : bitwise_and . '&' equality  (93)

	'&'  shift 110
	$end  reduce 91
	BOOL  reduce 91
	CHAR  reduce 91
	INT  reduce 91
	FLOAT  reduce 91
	STRING  reduce 91
	IDENTIFIER  reduce 91
	NULLV  reduce 91
	IMPORT  reduce 91
	EXPORT  reduce 91
	GLOBAL  reduce 91
	FUNCTION  reduce 91
	TYPE  reduce 91
	METHOD  reduce 91
	CONSTRUCTOR  reduce 91
	DESTRUCTOR  reduce 91
	CONTINUE  reduce 91
	BREAK  reduce 91
	RETURN  reduce 91
	VAR  reduce 91
	TRY  reduce 91
	SIGNAL  reduce 91
	BECAUSE  reduce 91
	IF  reduce 91
	ELSE  reduce 91
	WHILE  reduce 91
	FOR  reduce 91
	WHEN  reduce 91
	THEN  reduce 91
	NEW  reduce 91
	OR  reduce 91
	AND  reduce 91
	NOT  reduce 91
	COPIES  reduce 91
	REFS  reduce 91
	AS  reduce 91
	'{'  reduce 91
	'}'  reduce 91
	'+'  reduce 91
	'-'  reduce 91
	'~'  reduce 91
	'('  reduce 91
	')'  reduce 91
	','  reduce 91
	';'  reduce 91
	'='  reduce 91
	'|'  reduce 91
	'^'  reduce 91
	']'  reduce 91


state 165
	bitwise_and : bitwise_and '&' equality .  (93)
	equality : equality . EQ relational  (95)
	equality : equality . NE relational  (96)

	EQ  shift 111
	NE  shift 112
	$end  reduce 93
	BOOL  reduce 93
	CHAR  reduce 93
	INT  reduce 93
	FLOAT  reduce 93
	STRING  reduce 93
	IDENTIFIER  reduce 93
	NULLV  reduce 93
	IMPORT  reduce 93
	EXPORT  reduce 93
	GLOBAL  reduce 93
	FUNCTION  reduce 93
	TYPE  reduce 93
	METHOD  reduce 93
	CONSTRUCTOR  reduce 93
	DESTRUCTOR  reduce 93
	CONTINUE  reduce 93
	BREAK  reduce 93
	RETURN  reduce 93
	VAR  reduce 93
	TRY  reduce 93
	SIGNAL  reduce 93
	BECAUSE  reduce 93
	IF  reduce 93
	ELSE  reduce 93
	WHILE  reduce 93
	FOR  reduce 93
	WHEN  reduce 93
	THEN  reduce 93
	NEW  reduce 93
	OR  reduce 93
	AND  reduce 93
	NOT  reduce 93
	COPIES  reduce 93
	REFS  reduce 93
	AS  reduce 93
	'{'  reduce 93
	'}'  reduce 93
	'+'  reduce 93
	'-'  reduce 93
	'~'  reduce 93
	'('  reduce 93
	')'  reduce 93
	','  reduce 93
	';'  reduce 93
	'='  reduce 93
	'|'  reduce 93
	'^'  reduce 93
	'&'  reduce 93
	']'  reduce 93


state 166
	equality : equality EQ relational .  (95)
	relational : relational . LE sum  (98)
	relational : relational . GE sum  (99)
	relational : relational . '<' sum  (100)
	relational : relational . '>' sum  (101)

	LE  shift 113
	GE  shift 114
	'<'  shift 115
	'>'  shift 116
	$end  reduce 95
	BOOL  reduce 95
	CHAR  reduce 95
	INT  reduce 95
	FLOAT  reduce 95
	STRING  reduce 95
	IDENTIFIER  reduce 95
	NULLV  reduce 95
	IMPORT  reduce 95
	EXPORT  reduce 95
	GLOBAL  reduce 95
	FUNCTION  reduce 95
	TYPE  reduce 95
	METHOD  reduce 95
	CONSTRUCTOR  reduce 95
	DESTRUCTOR  reduce 95
	CONTINUE  reduce 95
	BREAK  reduce 95
	RETURN  reduce 95
	VAR  reduce 95
	TRY  reduce 95
	SIGNAL  reduce 95
	BECAUSE  reduce 95
	IF  reduce 95
	ELSE  reduce 95
	WHILE  reduce 95
	FOR  reduce 95
	WHEN  reduce 95
	THEN  reduce 95
	NEW  reduce 95
	OR  reduce 95
	AND  reduce 95
	NOT  reduce 95
	COPIES  reduce 95
	REFS  reduce 95
	AS  reduce 95
	EQ  reduce 95
	NE  reduce 95
	'{'  reduce 95
	'}'  reduce 95
	'+'  reduce 95
	'-'  reduce 95
	'~'  reduce 95
	'('  reduce 95
	')'  reduce 95
	','  reduce 95
	';'  reduce 95
	'='  reduce 95
	'|'  reduce 95
	'^'  reduce 95
	'&'  reduce 95
	']'  reduce 95


state 167
	equality : equality NE relational .  (96)
	relational : relational . LE sum  (98)
	relational : relational . GE sum  (99)
	relational : relational . '<' sum  (100)
	relational : relational . '>' sum  (101)

	LE  shift 113
	GE  shift 114
	'<'  shift 115
	'>'  shift 116
	$end  reduce 96
	BOOL  reduce 96
	CHAR  reduce 96
	INT  reduce 96
	FLOAT  reduce 96
	STRING  reduce 96
	IDENTIFIER  reduce 96
	NULLV  reduce 96
	IMPORT  reduce 96
	EXPORT  reduce 96
	GLOBAL  reduce 96
	FUNCTION  reduce 96
	TYPE  reduce 96
	METHOD  reduce 96
	CONSTRUCTOR  reduce 96
	DESTRUCTOR  reduce 96
	CONTINUE  reduce 96
	BREAK  reduce 96
	RETURN  reduce 96
	VAR  reduce 96
	TRY  reduce 96
	SIGNAL  reduce 96
	BECAUSE  reduce 96
	IF  reduce 96
	ELSE  reduce 96
	WHILE  reduce 96
	FOR  reduce 96
	WHEN  reduce 96
	THEN  reduce 96
	NEW  reduce 96
	OR  reduce 96
	AND  reduce 96
	NOT  reduce 96
	COPIES  reduce 96
	REFS  reduce 96
	AS  reduce 96
	EQ  reduce 96
	NE  reduce 96
	'{'  reduce 96
	'}'  reduce 96
	'+'  reduce 96
	'-'  reduce 96
	'~'  reduce 96
	'('  reduce 96
	')'  reduce 96
	','  reduce 96
	';'  reduce 96
	'='  reduce 96
	'|'  reduce 96
	'^'  reduce 96
	'&'  reduce 96
	']'  reduce 96


168: shift/reduce conflict (shift 117, reduce 98) on '+'
168: shift/reduce conflict (shift 118, reduce 98) on '-'
state 168
	relational : relational LE sum .  (98)
	sum : sum . '+' bitwise_shift  (103)
	sum : sum . '-' bitwise_shift  (104)

	'+'  shift 117
	'-'  shift 118
	$end  reduce 98
	BOOL  reduce 98
	CHAR  reduce 98
	INT  reduce 98
	FLOAT  reduce 98
	STRING  reduce 98
	IDENTIFIER  reduce 98
	NULLV  reduce 98
	IMPORT  reduce 98
	EXPORT  reduce 98
	GLOBAL  reduce 98
	FUNCTION  reduce 98
	TYPE  reduce 98
	METHOD  reduce 98
	CONSTRUCTOR  reduce 98
	DESTRUCTOR  reduce 98
	CONTINUE  reduce 98
	BREAK  reduce 98
	RETURN  reduce 98
	VAR  reduce 98
	TRY  reduce 98
	SIGNAL  reduce 98
	BECAUSE  reduce 98
	IF  reduce 98
	ELSE  reduce 98
	WHILE  reduce 98
	FOR  reduce 98
	WHEN  reduce 98
	THEN  reduce 98
	NEW  reduce 98
	OR  reduce 98
	AND  reduce 98
	NOT  reduce 98
	COPIES  reduce 98
	REFS  reduce 98
	AS  reduce 98
	EQ  reduce 98
	NE  reduce 98
	LE  reduce 98
	GE  reduce 98
	'{'  reduce 98
	'}'  reduce 98
	'~'  reduce 98
	'('  reduce 98
	')'  reduce 98
	','  reduce 98
	';'  reduce 98
	'='  reduce 98
	'|'  reduce 98
	'^'  reduce 98
	'&'  reduce 98
	'<'  reduce 98
	'>'  reduce 98
	']'  reduce 98


169: shift/reduce conflict (shift 117, reduce 99) on '+'
169: shift/reduce conflict (shift 118, reduce 99) on '-'
state 169
	relational : relational GE sum .  (99)
	sum : sum . '+' bitwise_shift  (103)
	sum : sum . '-' bitwise_shift  (104)

	'+'  shift 117
	'-'  shift 118
	$end  reduce 99
	BOOL  reduce 99
	CHAR  reduce 99
	INT  reduce 99
	FLOAT  reduce 99
	STRING  reduce 99
	IDENTIFIER  reduce 99
	NULLV  reduce 99
	IMPORT  reduce 99
	EXPORT  reduce 99
	GLOBAL  reduce 99
	FUNCTION  reduce 99
	TYPE  reduce 99
	METHOD  reduce 99
	CONSTRUCTOR  reduce 99
	DESTRUCTOR  reduce 99
	CONTINUE  reduce 99
	BREAK  reduce 99
	RETURN  reduce 99
	VAR  reduce 99
	TRY  reduce 99
	SIGNAL  reduce 99
	BECAUSE  reduce 99
	IF  reduce 99
	ELSE  reduce 99
	WHILE  reduce 99
	FOR  reduce 99
	WHEN  reduce 99
	THEN  reduce 99
	NEW  reduce 99
	OR  reduce 99
	AND  reduce 99
	NOT  reduce 99
	COPIES  reduce 99
	REFS  reduce 99
	AS  reduce 99
	EQ  reduce 99
	NE  reduce 99
	LE  reduce 99
	GE  reduce 99
	'{'  reduce 99
	'}'  reduce 99
	'~'  reduce 99
	'('  reduce 99
	')'  reduce 99
	','  reduce 99
	';'  reduce 99
	'='  reduce 99
	'|'  reduce 99
	'^'  reduce 99
	'&'  reduce 99
	'<'  reduce 99
	'>'  reduce 99
	']'  reduce 99


170: shift/reduce conflict (shift 117, reduce 100) on '+'
170: shift/reduce conflict (shift 118, reduce 100) on '-'
state 170
	relational : relational '<' sum .  (100)
	sum : sum . '+' bitwise_shift  (103)
	sum : sum . '-' bitwise_shift  (104)

	'+'  shift 117
	'-'  shift 118
	$end  reduce 100
	BOOL  reduce 100
	CHAR  reduce 100
	INT  reduce 100
	FLOAT  reduce 100
	STRING  reduce 100
	IDENTIFIER  reduce 100
	NULLV  reduce 100
	IMPORT  reduce 100
	EXPORT  reduce 100
	GLOBAL  reduce 100
	FUNCTION  reduce 100
	TYPE  reduce 100
	METHOD  reduce 100
	CONSTRUCTOR  reduce 100
	DESTRUCTOR  reduce 100
	CONTINUE  reduce 100
	BREAK  reduce 100
	RETURN  reduce 100
	VAR  reduce 100
	TRY  reduce 100
	SIGNAL  reduce 100
	BECAUSE  reduce 100
	IF  reduce 100
	ELSE  reduce 100
	WHILE  reduce 100
	FOR  reduce 100
	WHEN  reduce 100
	THEN  reduce 100
	NEW  reduce 100
	OR  reduce 100
	AND  reduce 100
	NOT  reduce 100
	COPIES  reduce 100
	REFS  reduce 100
	AS  reduce 100
	EQ  reduce 100
	NE  reduce 100
	LE  reduce 100
	GE  reduce 100
	'{'  reduce 100
	'}'  reduce 100
	'~'  reduce 100
	'('  reduce 100
	')'  reduce 100
	','  reduce 100
	';'  reduce 100
	'='  reduce 100
	'|'  reduce 100
	'^'  reduce 100
	'&'  reduce 100
	'<'  reduce 100
	'>'  reduce 100
	']'  reduce 100


171: shift/reduce conflict (shift 117, reduce 101) on '+'
171: shift/reduce conflict (shift 118, reduce 101) on '-'
state 171
	relational : relational '>' sum .  (101)
	sum : sum . '+' bitwise_shift  (103)
	sum : sum . '-' bitwise_shift  (104)

	'+'  shift 117
	'-'  shift 118
	$end  reduce 101
	BOOL  reduce 101
	CHAR  reduce 101
	INT  reduce 101
	FLOAT  reduce 101
	STRING  reduce 101
	IDENTIFIER  reduce 101
	NULLV  reduce 101
	IMPORT  reduce 101
	EXPORT  reduce 101
	GLOBAL  reduce 101
	FUNCTION  reduce 101
	TYPE  reduce 101
	METHOD  reduce 101
	CONSTRUCTOR  reduce 101
	DESTRUCTOR  reduce 101
	CONTINUE  reduce 101
	BREAK  reduce 101
	RETURN  reduce 101
	VAR  reduce 101
	TRY  reduce 101
	SIGNAL  reduce 101
	BECAUSE  reduce 101
	IF  reduce 101
	ELSE  reduce 101
	WHILE  reduce 101
	FOR  reduce 101
	WHEN  reduce 101
	THEN  reduce 101
	NEW  reduce 101
	OR  reduce 101
	AND  reduce 101
	NOT  reduce 101
	COPIES  reduce 101
	REFS  reduce 101
	AS  reduce 101
	EQ  reduce 101
	NE  reduce 101
	LE  reduce 101
	GE  reduce 101
	'{'  reduce 101
	'}'  reduce 101
	'~'  reduce 101
	'('  reduce 101
	')'  reduce 101
	','  reduce 101
	';'  reduce 101
	'='  reduce 101
	'|'  reduce 101
	'^'  reduce 101
	'&'  reduce 101
	'<'  reduce 101
	'>'  reduce 101
	']'  reduce 101


state 172
	sum : sum '+' bitwise_shift .  (103)
	bitwise_shift : bitwise_shift . LSHIFT term  (106)
	bitwise_shift : bitwise_shift . RSHIFT term  (107)

	LSHIFT  shift 119
	RSHIFT  shift 120
	$end  reduce 103
	BOOL  reduce 103
	CHAR  reduce 103
	INT  reduce 103
	FLOAT  reduce 103
	STRING  reduce 103
	IDENTIFIER  reduce 103
	NULLV  reduce 103
	IMPORT  reduce 103
	EXPORT  reduce 103
	GLOBAL  reduce 103
	FUNCTION  reduce 103
	TYPE  reduce 103
	METHOD  reduce 103
	CONSTRUCTOR  reduce 103
	DESTRUCTOR  reduce 103
	CONTINUE  reduce 103
	BREAK  reduce 103
	RETURN  reduce 103
	VAR  reduce 103
	TRY  reduce 103
	SIGNAL  reduce 103
	BECAUSE  reduce 103
	IF  reduce 103
	ELSE  reduce 103
	WHILE  reduce 103
	FOR  reduce 103
	WHEN  reduce 103
	THEN  reduce 103
	NEW  reduce 103
	OR  reduce 103
	AND  reduce 103
	NOT  reduce 103
	COPIES  reduce 103
	REFS  reduce 103
	AS  reduce 103
	EQ  reduce 103
	NE  reduce 103
	LE  reduce 103
	GE  reduce 103
	'{'  reduce 103
	'}'  reduce 103
	'+'  reduce 103
	'-'  reduce 103
	'~'  reduce 103
	'('  reduce 103
	')'  reduce 103
	','  reduce 103
	';'  reduce 103
	'='  reduce 103
	'|'  reduce 103
	'^'  reduce 103
	'&'  reduce 103
	'<'  reduce 103
	'>'  reduce 103
	']'  reduce 103


state 173
	sum : sum '-' bitwise_shift .  (104)
	bitwise_shift : bitwise_shift . LSHIFT term  (106)
	bitwise_shift : bitwise_shift . RSHIFT term  (107)

	LSHIFT  shift 119
	RSHIFT  shift 120
	$end  reduce 104
	BOOL  reduce 104
	CHAR  reduce 104
	INT  reduce 104
	FLOAT  reduce 104
	STRING  reduce 104
	IDENTIFIER  reduce 104
	NULLV  reduce 104
	IMPORT  reduce 104
	EXPORT  reduce 104
	GLOBAL  reduce 104
	FUNCTION  reduce 104
	TYPE  reduce 104
	METHOD  reduce 104
	CONSTRUCTOR  reduce 104
	DESTRUCTOR  reduce 104
	CONTINUE  reduce 104
	BREAK  reduce 104
	RETURN  reduce 104
	VAR  reduce 104
	TRY  reduce 104
	SIGNAL  reduce 104
	BECAUSE  reduce 104
	IF  reduce 104
	ELSE  reduce 104
	WHILE  reduce 104
	FOR  reduce 104
	WHEN  reduce 104
	THEN  reduce 104
	NEW  reduce 104
	OR  reduce 104
	AND  reduce 104
	NOT  reduce 104
	COPIES  reduce 104
	REFS  reduce 104
	AS  reduce 104
	EQ  reduce 104
	NE  reduce 104
	LE  reduce 104
	GE  reduce 104
	'{'  reduce 104
	'}'  reduce 104
	'+'  reduce 104
	'-'  reduce 104
	'~'  reduce 104
	'('  reduce 104
	')'  reduce 104
	','  reduce 104
	';'  reduce 104
	'='  reduce 104
	'|'  reduce 104
	'^'  reduce 104
	'&'  reduce 104
	'<'  reduce 104
	'>'  reduce 104
	']'  reduce 104


state 174
	bitwise_shift : bitwise_shift LSHIFT term .  (106)
	term : term . '*' prefix_op  (109)
	term : term . '/' prefix_op  (110)
	term : term . '%' prefix_op  (111)

	'*'  shift 121
	'/'  shift 122
	'%'  shift 123
	$end  reduce 106
	BOOL  reduce 106
	CHAR  reduce 106
	INT  reduce 106
	FLOAT  reduce 106
	STRING  reduce 106
	IDENTIFIER  reduce 106
	NULLV  reduce 106
	IMPORT  reduce 106
	EXPORT  reduce 106
	GLOBAL  reduce 106
	FUNCTION  reduce 106
	TYPE  reduce 106
	METHOD  reduce 106
	CONSTRUCTOR  reduce 106
	DESTRUCTOR  reduce 106
	CONTINUE  reduce 106
	BREAK  reduce 106
	RETURN  reduce 106
	VAR  reduce 106
	TRY  reduce 106
	SIGNAL  reduce 106
	BECAUSE  reduce 106
	IF  reduce 106
	ELSE  reduce 106
	WHILE  reduce 106
	FOR  reduce 106
	WHEN  reduce 106
	THEN  reduce 106
	NEW  reduce 106
	OR  reduce 106
	AND  reduce 106
	NOT  reduce 106
	COPIES  reduce 106
	REFS  reduce 106
	AS  reduce 106
	LSHIFT  reduce 106
	RSHIFT  reduce 106
	EQ  reduce 106
	NE  reduce 106
	LE  reduce 106
	GE  reduce 106
	'{'  reduce 106
	'}'  reduce 106
	'+'  reduce 106
	'-'  reduce 106
	'~'  reduce 106
	'('  reduce 106
	')'  reduce 106
	','  reduce 106
	';'  reduce 106
	'='  reduce 106
	'|'  reduce 106
	'^'  reduce 106
	'&'  reduce 106
	'<'  reduce 106
	'>'  reduce 106
	']'  reduce 106


state 175
	bitwise_shift : bitwise_shift RSHIFT term .  (107)
	term : term . '*' prefix_op  (109)
	term : term . '/' prefix_op  (110)
	term : term . '%' prefix_op  (111)

	'*'  shift 121
	'/'  shift 122
	'%'  shift 123
	$end  reduce 107
	BOOL  reduce 107
	CHAR  reduce 107
	INT  reduce 107
	FLOAT  reduce 107
	STRING  reduce 107
	IDENTIFIER  reduce 107
	NULLV  reduce 107
	IMPORT  reduce 107
	EXPORT  reduce 107
	GLOBAL  reduce 107
	FUNCTION  reduce 107
	TYPE  reduce 107
	METHOD  reduce 107
	CONSTRUCTOR  reduce 107
	DESTRUCTOR  reduce 107
	CONTINUE  reduce 107
	BREAK  reduce 107
	RETURN  reduce 107
	VAR  reduce 107
	TRY  reduce 107
	SIGNAL  reduce 107
	BECAUSE  reduce 107
	IF  reduce 107
	ELSE  reduce 107
	WHILE  reduce 107
	FOR  reduce 107
	WHEN  reduce 107
	THEN  reduce 107
	NEW  reduce 107
	OR  reduce 107
	AND  reduce 107
	NOT  reduce 107
	COPIES  reduce 107
	REFS  reduce 107
	AS  reduce 107
	LSHIFT  reduce 107
	RSHIFT  reduce 107
	EQ  reduce 107
	NE  reduce 107
	LE  reduce 107
	GE  reduce 107
	'{'  reduce 107
	'}'  reduce 107
	'+'  reduce 107
	'-'  reduce 107
	'~'  reduce 107
	'('  reduce 107
	')'  reduce 107
	','  reduce 107
	';'  reduce 107
	'='  reduce 107
	'|'  reduce 107
	'^'  reduce 107
	'&'  reduce 107
	'<'  reduce 107
	'>'  reduce 107
	']'  reduce 107


state 176
	term : term '*' prefix_op .  (109)

	.  reduce 109


state 177
	term : term '/' prefix_op .  (110)

	.  reduce 110


state 178
	term : term '%' prefix_op .  (111)

	.  reduce 111


state 179
	primary : primary '(' ')' .  (119)

	.  reduce 119


state 180
	expr_list : expr .  (134)

	.  reduce 134


state 181
	primary : primary '(' expr_list . ')'  (118)
	expr_list : expr_list . ',' expr  (133)

	')'  shift 212
	','  shift 213
	.  error


state 182
	primary : primary '[' expr . ']'  (120)

	']'  shift 214
	.  error


state 183
	primary : primary '.' IDENTIFIER .  (121)

	.  reduce 121


state 184
	primary : primary ':' IDENTIFIER .  (122)

	.  reduce 122


state 185
	import_stmt : IMPORT MODULE_PATH AS IDENTIFIER .  (11)

	.  reduce 11


state 186
	export_item_list : export_item_list ',' export_item .  (13)

	.  reduce 13


state 187
	export_item : expr AS IDENTIFIER .  (15)

	.  reduce 15


state 188
	function_stmt : FUNCTION IDENTIFIER '(' ')' . block_stmt  (18)

	'{'  shift 29
	.  error

	block_stmt  goto 215


state 189
	function_stmt : FUNCTION IDENTIFIER '(' parameter_list . ')' block_stmt  (17)
	parameter_list : parameter_list . ',' parameter_item  (19)

	')'  shift 216
	','  shift 196
	.  error


state 190
	type_stmt : TYPE IDENTIFIER '{' PUBLIC . member_list PRIVATE member_list '}'  (24)
	type_stmt : TYPE IDENTIFIER '{' PUBLIC . PRIVATE member_list '}'  (25)
	type_stmt : TYPE IDENTIFIER '{' PUBLIC . member_list PRIVATE '}'  (26)

	IDENTIFIER  shift 217
	PRIVATE  shift 218
	.  error

	member_list  goto 219
	member_item  goto 220


state 191
	parameter_list : parameter_list . ',' parameter_item  (19)
	method_stmt : METHOD IDENTIFIER '(' parameter_list . ')' OF IDENTIFIER block_stmt  (31)

	')'  shift 221
	','  shift 196
	.  error


state 192
	parameter_item : COPY IDENTIFIER .  (21)

	.  reduce 21


state 193
	parameter_item : REF IDENTIFIER .  (22)

	.  reduce 22


state 194
	parameter_item : PASS IDENTIFIER .  (23)

	.  reduce 23


state 195
	constructor_stmt : CONSTRUCTOR '(' parameter_list ')' . OF IDENTIFIER block_stmt  (32)

	OF  shift 222
	.  error


state 196
	parameter_list : parameter_list ',' . parameter_item  (19)

	COPY  shift 134
	REF  shift 135
	PASS  shift 136
	.  error

	parameter_item  goto 223


state 197
	destructor_stmt : DESTRUCTOR OF IDENTIFIER block_stmt .  (33)

	.  reduce 33


state 198
	var_stmt : VAR IDENTIFIER '=' expr .  (76)

	.  reduce 76


state 199
	try_catch_stmt : TRY block_stmt CATCH '*' . AS IDENTIFIER block_stmt  (70)

	AS  shift 224
	.  error


state 200
	catch_item : CATCH expr . AS IDENTIFIER block_stmt  (74)

	AS  shift 225
	.  error


state 201
	try_catch_stmt : TRY block_stmt catch_item_list CATCH . '*' AS IDENTIFIER block_stmt  (69)

	'*'  shift 226
	.  error


state 202
	catch_item_list : catch_item ',' . catch_item_list  (72)

	CATCH  shift 227
	.  error

	catch_item_list  goto 228
	catch_item  goto 146


state 203
	signal_stmt : SIGNAL expr BECAUSE expr .  (75)

	.  reduce 75


state 204
	if_stmt : IF expr stmt ELSE . stmt  (60)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 229
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


205: shift/reduce conflict (shift 102, reduce 59) on ';'
state 205
	stmt : stmt . ';'  (46)
	for_stmt : FOR ';' ';' stmt .  (59)

	';'  shift 102
	$end  reduce 59
	BOOL  reduce 59
	CHAR  reduce 59
	INT  reduce 59
	FLOAT  reduce 59
	STRING  reduce 59
	IDENTIFIER  reduce 59
	NULLV  reduce 59
	IMPORT  reduce 59
	EXPORT  reduce 59
	GLOBAL  reduce 59
	FUNCTION  reduce 59
	TYPE  reduce 59
	METHOD  reduce 59
	CONSTRUCTOR  reduce 59
	DESTRUCTOR  reduce 59
	CONTINUE  reduce 59
	BREAK  reduce 59
	RETURN  reduce 59
	VAR  reduce 59
	TRY  reduce 59
	SIGNAL  reduce 59
	IF  reduce 59
	ELSE  reduce 59
	WHILE  reduce 59
	FOR  reduce 59
	WHEN  reduce 59
	NEW  reduce 59
	NOT  reduce 59
	'{'  reduce 59
	'}'  reduce 59
	'+'  reduce 59
	'-'  reduce 59
	'~'  reduce 59
	'('  reduce 59


206: shift/reduce conflict (shift 2, reduce 34) on BOOL
206: shift/reduce conflict (shift 3, reduce 34) on CHAR
206: shift/reduce conflict (shift 4, reduce 34) on INT
206: shift/reduce conflict (shift 5, reduce 34) on FLOAT
206: shift/reduce conflict (shift 6, reduce 34) on STRING
206: shift/reduce conflict (shift 7, reduce 34) on IDENTIFIER
206: shift/reduce conflict (shift 8, reduce 34) on NULLV
206: shift/reduce conflict (shift 17, reduce 34) on CONTINUE
206: shift/reduce conflict (shift 18, reduce 34) on BREAK
206: shift/reduce conflict (shift 19, reduce 34) on RETURN
206: shift/reduce conflict (shift 20, reduce 34) on VAR
206: shift/reduce conflict (shift 21, reduce 34) on TRY
206: shift/reduce conflict (shift 22, reduce 34) on SIGNAL
206: shift/reduce conflict (shift 23, reduce 34) on IF
206: shift/reduce conflict (shift 24, reduce 34) on WHILE
206: shift/reduce conflict (shift 25, reduce 34) on FOR
206: shift/reduce conflict (shift 26, reduce 34) on WHEN
206: shift/reduce conflict (shift 27, reduce 34) on NEW
206: shift/reduce conflict (shift 28, reduce 34) on NOT
206: shift/reduce conflict (shift 29, reduce 34) on '{'
206: shift/reduce conflict (shift 30, reduce 34) on '+'
206: shift/reduce conflict (shift 31, reduce 34) on '-'
206: shift/reduce conflict (shift 32, reduce 34) on '~'
206: shift/reduce conflict (shift 33, reduce 34) on '('
state 206
	stmt : expr .  (34)
	for_stmt : FOR ';' ';' expr . stmt  (56)
	assignment_stmt : expr . COPIES expr  (67)
	assignment_stmt : expr . REFS expr  (68)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	COPIES  shift 103
	REFS  shift 104
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	$end  reduce 34
	IMPORT  reduce 34
	EXPORT  reduce 34
	GLOBAL  reduce 34
	FUNCTION  reduce 34
	TYPE  reduce 34
	METHOD  reduce 34
	CONSTRUCTOR  reduce 34
	DESTRUCTOR  reduce 34
	ELSE  reduce 34
	'}'  reduce 34
	';'  reduce 34

	stmt  goto 230
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 207
	for_stmt : FOR ';' expr ';' . expr stmt  (53)
	for_stmt : FOR ';' expr ';' . stmt  (57)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 231
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 232
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 208
	for_stmt : FOR expr ';' ';' . expr stmt  (54)
	for_stmt : FOR expr ';' ';' . stmt  (58)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 233
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 234
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 209
	for_stmt : FOR expr ';' expr . ';' expr stmt  (52)
	for_stmt : FOR expr ';' expr . ';' stmt  (55)

	';'  shift 235
	.  error


state 210
	inline_if : WHEN new THEN new . ELSE new  (80)

	ELSE  shift 236
	.  error


state 211
	new : NEW expr '(' expr_list . ')'  (82)
	expr_list : expr_list . ',' expr  (133)

	')'  shift 237
	','  shift 213
	.  error


state 212
	primary : primary '(' expr_list ')' .  (118)

	.  reduce 118


state 213
	expr_list : expr_list ',' . expr  (133)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 238
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 214
	primary : primary '[' expr ']' .  (120)

	.  reduce 120


state 215
	function_stmt : FUNCTION IDENTIFIER '(' ')' block_stmt .  (18)

	.  reduce 18


state 216
	function_stmt : FUNCTION IDENTIFIER '(' parameter_list ')' . block_stmt  (17)

	'{'  shift 29
	.  error

	block_stmt  goto 239


state 217
	member_item : IDENTIFIER . "()"  (29)
	member_item : IDENTIFIER .  (30)

	"()"  shift 240
	PRIVATE  reduce 30
	'}'  reduce 30
	','  reduce 30


state 218
	type_stmt : TYPE IDENTIFIER '{' PUBLIC PRIVATE . member_list '}'  (25)

	IDENTIFIER  shift 217
	.  error

	member_list  goto 241
	member_item  goto 220


state 219
	type_stmt : TYPE IDENTIFIER '{' PUBLIC member_list . PRIVATE member_list '}'  (24)
	type_stmt : TYPE IDENTIFIER '{' PUBLIC member_list . PRIVATE '}'  (26)
	member_list : member_list . ',' member_item  (27)

	PRIVATE  shift 242
	','  shift 243
	.  error


state 220
	member_list : member_item .  (28)

	.  reduce 28


state 221
	method_stmt : METHOD IDENTIFIER '(' parameter_list ')' . OF IDENTIFIER block_stmt  (31)

	OF  shift 244
	.  error


state 222
	constructor_stmt : CONSTRUCTOR '(' parameter_list ')' OF . IDENTIFIER block_stmt  (32)

	IDENTIFIER  shift 245
	.  error


state 223
	parameter_list : parameter_list ',' parameter_item .  (19)

	.  reduce 19


state 224
	try_catch_stmt : TRY block_stmt CATCH '*' AS . IDENTIFIER block_stmt  (70)

	IDENTIFIER  shift 246
	.  error


state 225
	catch_item : CATCH expr AS . IDENTIFIER block_stmt  (74)

	IDENTIFIER  shift 247
	.  error


state 226
	try_catch_stmt : TRY block_stmt catch_item_list CATCH '*' . AS IDENTIFIER block_stmt  (69)

	AS  shift 248
	.  error


state 227
	catch_item : CATCH . expr AS IDENTIFIER block_stmt  (74)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	expr  goto 200
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 228
	catch_item_list : catch_item ',' catch_item_list .  (72)

	.  reduce 72


229: shift/reduce conflict (shift 102, reduce 60) on ';'
state 229
	stmt : stmt . ';'  (46)
	if_stmt : IF expr stmt ELSE stmt .  (60)

	';'  shift 102
	$end  reduce 60
	BOOL  reduce 60
	CHAR  reduce 60
	INT  reduce 60
	FLOAT  reduce 60
	STRING  reduce 60
	IDENTIFIER  reduce 60
	NULLV  reduce 60
	IMPORT  reduce 60
	EXPORT  reduce 60
	GLOBAL  reduce 60
	FUNCTION  reduce 60
	TYPE  reduce 60
	METHOD  reduce 60
	CONSTRUCTOR  reduce 60
	DESTRUCTOR  reduce 60
	CONTINUE  reduce 60
	BREAK  reduce 60
	RETURN  reduce 60
	VAR  reduce 60
	TRY  reduce 60
	SIGNAL  reduce 60
	IF  reduce 60
	ELSE  reduce 60
	WHILE  reduce 60
	FOR  reduce 60
	WHEN  reduce 60
	NEW  reduce 60
	NOT  reduce 60
	'{'  reduce 60
	'}'  reduce 60
	'+'  reduce 60
	'-'  reduce 60
	'~'  reduce 60
	'('  reduce 60


230: shift/reduce conflict (shift 102, reduce 56) on ';'
state 230
	stmt : stmt . ';'  (46)
	for_stmt : FOR ';' ';' expr stmt .  (56)

	';'  shift 102
	$end  reduce 56
	BOOL  reduce 56
	CHAR  reduce 56
	INT  reduce 56
	FLOAT  reduce 56
	STRING  reduce 56
	IDENTIFIER  reduce 56
	NULLV  reduce 56
	IMPORT  reduce 56
	EXPORT  reduce 56
	GLOBAL  reduce 56
	FUNCTION  reduce 56
	TYPE  reduce 56
	METHOD  reduce 56
	CONSTRUCTOR  reduce 56
	DESTRUCTOR  reduce 56
	CONTINUE  reduce 56
	BREAK  reduce 56
	RETURN  reduce 56
	VAR  reduce 56
	TRY  reduce 56
	SIGNAL  reduce 56
	IF  reduce 56
	ELSE  reduce 56
	WHILE  reduce 56
	FOR  reduce 56
	WHEN  reduce 56
	NEW  reduce 56
	NOT  reduce 56
	'{'  reduce 56
	'}'  reduce 56
	'+'  reduce 56
	'-'  reduce 56
	'~'  reduce 56
	'('  reduce 56


231: shift/reduce conflict (shift 102, reduce 57) on ';'
state 231
	stmt : stmt . ';'  (46)
	for_stmt : FOR ';' expr ';' stmt .  (57)

	';'  shift 102
	$end  reduce 57
	BOOL  reduce 57
	CHAR  reduce 57
	INT  reduce 57
	FLOAT  reduce 57
	STRING  reduce 57
	IDENTIFIER  reduce 57
	NULLV  reduce 57
	IMPORT  reduce 57
	EXPORT  reduce 57
	GLOBAL  reduce 57
	FUNCTION  reduce 57
	TYPE  reduce 57
	METHOD  reduce 57
	CONSTRUCTOR  reduce 57
	DESTRUCTOR  reduce 57
	CONTINUE  reduce 57
	BREAK  reduce 57
	RETURN  reduce 57
	VAR  reduce 57
	TRY  reduce 57
	SIGNAL  reduce 57
	IF  reduce 57
	ELSE  reduce 57
	WHILE  reduce 57
	FOR  reduce 57
	WHEN  reduce 57
	NEW  reduce 57
	NOT  reduce 57
	'{'  reduce 57
	'}'  reduce 57
	'+'  reduce 57
	'-'  reduce 57
	'~'  reduce 57
	'('  reduce 57


232: shift/reduce conflict (shift 2, reduce 34) on BOOL
232: shift/reduce conflict (shift 3, reduce 34) on CHAR
232: shift/reduce conflict (shift 4, reduce 34) on INT
232: shift/reduce conflict (shift 5, reduce 34) on FLOAT
232: shift/reduce conflict (shift 6, reduce 34) on STRING
232: shift/reduce conflict (shift 7, reduce 34) on IDENTIFIER
232: shift/reduce conflict (shift 8, reduce 34) on NULLV
232: shift/reduce conflict (shift 17, reduce 34) on CONTINUE
232: shift/reduce conflict (shift 18, reduce 34) on BREAK
232: shift/reduce conflict (shift 19, reduce 34) on RETURN
232: shift/reduce conflict (shift 20, reduce 34) on VAR
232: shift/reduce conflict (shift 21, reduce 34) on TRY
232: shift/reduce conflict (shift 22, reduce 34) on SIGNAL
232: shift/reduce conflict (shift 23, reduce 34) on IF
232: shift/reduce conflict (shift 24, reduce 34) on WHILE
232: shift/reduce conflict (shift 25, reduce 34) on FOR
232: shift/reduce conflict (shift 26, reduce 34) on WHEN
232: shift/reduce conflict (shift 27, reduce 34) on NEW
232: shift/reduce conflict (shift 28, reduce 34) on NOT
232: shift/reduce conflict (shift 29, reduce 34) on '{'
232: shift/reduce conflict (shift 30, reduce 34) on '+'
232: shift/reduce conflict (shift 31, reduce 34) on '-'
232: shift/reduce conflict (shift 32, reduce 34) on '~'
232: shift/reduce conflict (shift 33, reduce 34) on '('
state 232
	stmt : expr .  (34)
	for_stmt : FOR ';' expr ';' expr . stmt  (53)
	assignment_stmt : expr . COPIES expr  (67)
	assignment_stmt : expr . REFS expr  (68)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	COPIES  shift 103
	REFS  shift 104
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	$end  reduce 34
	IMPORT  reduce 34
	EXPORT  reduce 34
	GLOBAL  reduce 34
	FUNCTION  reduce 34
	TYPE  reduce 34
	METHOD  reduce 34
	CONSTRUCTOR  reduce 34
	DESTRUCTOR  reduce 34
	ELSE  reduce 34
	'}'  reduce 34
	';'  reduce 34

	stmt  goto 249
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


233: shift/reduce conflict (shift 102, reduce 58) on ';'
state 233
	stmt : stmt . ';'  (46)
	for_stmt : FOR expr ';' ';' stmt .  (58)

	';'  shift 102
	$end  reduce 58
	BOOL  reduce 58
	CHAR  reduce 58
	INT  reduce 58
	FLOAT  reduce 58
	STRING  reduce 58
	IDENTIFIER  reduce 58
	NULLV  reduce 58
	IMPORT  reduce 58
	EXPORT  reduce 58
	GLOBAL  reduce 58
	FUNCTION  reduce 58
	TYPE  reduce 58
	METHOD  reduce 58
	CONSTRUCTOR  reduce 58
	DESTRUCTOR  reduce 58
	CONTINUE  reduce 58
	BREAK  reduce 58
	RETURN  reduce 58
	VAR  reduce 58
	TRY  reduce 58
	SIGNAL  reduce 58
	IF  reduce 58
	ELSE  reduce 58
	WHILE  reduce 58
	FOR  reduce 58
	WHEN  reduce 58
	NEW  reduce 58
	NOT  reduce 58
	'{'  reduce 58
	'}'  reduce 58
	'+'  reduce 58
	'-'  reduce 58
	'~'  reduce 58
	'('  reduce 58


234: shift/reduce conflict (shift 2, reduce 34) on BOOL
234: shift/reduce conflict (shift 3, reduce 34) on CHAR
234: shift/reduce conflict (shift 4, reduce 34) on INT
234: shift/reduce conflict (shift 5, reduce 34) on FLOAT
234: shift/reduce conflict (shift 6, reduce 34) on STRING
234: shift/reduce conflict (shift 7, reduce 34) on IDENTIFIER
234: shift/reduce conflict (shift 8, reduce 34) on NULLV
234: shift/reduce conflict (shift 17, reduce 34) on CONTINUE
234: shift/reduce conflict (shift 18, reduce 34) on BREAK
234: shift/reduce conflict (shift 19, reduce 34) on RETURN
234: shift/reduce conflict (shift 20, reduce 34) on VAR
234: shift/reduce conflict (shift 21, reduce 34) on TRY
234: shift/reduce conflict (shift 22, reduce 34) on SIGNAL
234: shift/reduce conflict (shift 23, reduce 34) on IF
234: shift/reduce conflict (shift 24, reduce 34) on WHILE
234: shift/reduce conflict (shift 25, reduce 34) on FOR
234: shift/reduce conflict (shift 26, reduce 34) on WHEN
234: shift/reduce conflict (shift 27, reduce 34) on NEW
234: shift/reduce conflict (shift 28, reduce 34) on NOT
234: shift/reduce conflict (shift 29, reduce 34) on '{'
234: shift/reduce conflict (shift 30, reduce 34) on '+'
234: shift/reduce conflict (shift 31, reduce 34) on '-'
234: shift/reduce conflict (shift 32, reduce 34) on '~'
234: shift/reduce conflict (shift 33, reduce 34) on '('
state 234
	stmt : expr .  (34)
	for_stmt : FOR expr ';' ';' expr . stmt  (54)
	assignment_stmt : expr . COPIES expr  (67)
	assignment_stmt : expr . REFS expr  (68)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	COPIES  shift 103
	REFS  shift 104
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	$end  reduce 34
	IMPORT  reduce 34
	EXPORT  reduce 34
	GLOBAL  reduce 34
	FUNCTION  reduce 34
	TYPE  reduce 34
	METHOD  reduce 34
	CONSTRUCTOR  reduce 34
	DESTRUCTOR  reduce 34
	ELSE  reduce 34
	'}'  reduce 34
	';'  reduce 34

	stmt  goto 250
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 235
	for_stmt : FOR expr ';' expr ';' . expr stmt  (52)
	for_stmt : FOR expr ';' expr ';' . stmt  (55)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	stmt  goto 251
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 252
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 236
	inline_if : WHEN new THEN new ELSE . new  (80)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	NEW  shift 27
	NOT  shift 28
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	.  error

	new  goto 253
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 237
	new : NEW expr '(' expr_list ')' .  (82)

	.  reduce 82


state 238
	expr_list : expr_list ',' expr .  (133)

	.  reduce 133


state 239
	function_stmt : FUNCTION IDENTIFIER '(' parameter_list ')' block_stmt .  (17)

	.  reduce 17


state 240
	member_item : IDENTIFIER "()" .  (29)

	.  reduce 29


state 241
	type_stmt : TYPE IDENTIFIER '{' PUBLIC PRIVATE member_list . '}'  (25)
	member_list : member_list . ',' member_item  (27)

	'}'  shift 254
	','  shift 243
	.  error


state 242
	type_stmt : TYPE IDENTIFIER '{' PUBLIC member_list PRIVATE . member_list '}'  (24)
	type_stmt : TYPE IDENTIFIER '{' PUBLIC member_list PRIVATE . '}'  (26)

	IDENTIFIER  shift 217
	'}'  shift 255
	.  error

	member_list  goto 256
	member_item  goto 220


state 243
	member_list : member_list ',' . member_item  (27)

	IDENTIFIER  shift 217
	.  error

	member_item  goto 257


state 244
	method_stmt : METHOD IDENTIFIER '(' parameter_list ')' OF . IDENTIFIER block_stmt  (31)

	IDENTIFIER  shift 258
	.  error


state 245
	constructor_stmt : CONSTRUCTOR '(' parameter_list ')' OF IDENTIFIER . block_stmt  (32)

	'{'  shift 29
	.  error

	block_stmt  goto 259


state 246
	try_catch_stmt : TRY block_stmt CATCH '*' AS IDENTIFIER . block_stmt  (70)

	'{'  shift 29
	.  error

	block_stmt  goto 260


state 247
	catch_item : CATCH expr AS IDENTIFIER . block_stmt  (74)

	'{'  shift 29
	.  error

	block_stmt  goto 261


state 248
	try_catch_stmt : TRY block_stmt catch_item_list CATCH '*' AS . IDENTIFIER block_stmt  (69)

	IDENTIFIER  shift 262
	.  error


249: shift/reduce conflict (shift 102, reduce 53) on ';'
state 249
	stmt : stmt . ';'  (46)
	for_stmt : FOR ';' expr ';' expr stmt .  (53)

	';'  shift 102
	$end  reduce 53
	BOOL  reduce 53
	CHAR  reduce 53
	INT  reduce 53
	FLOAT  reduce 53
	STRING  reduce 53
	IDENTIFIER  reduce 53
	NULLV  reduce 53
	IMPORT  reduce 53
	EXPORT  reduce 53
	GLOBAL  reduce 53
	FUNCTION  reduce 53
	TYPE  reduce 53
	METHOD  reduce 53
	CONSTRUCTOR  reduce 53
	DESTRUCTOR  reduce 53
	CONTINUE  reduce 53
	BREAK  reduce 53
	RETURN  reduce 53
	VAR  reduce 53
	TRY  reduce 53
	SIGNAL  reduce 53
	IF  reduce 53
	ELSE  reduce 53
	WHILE  reduce 53
	FOR  reduce 53
	WHEN  reduce 53
	NEW  reduce 53
	NOT  reduce 53
	'{'  reduce 53
	'}'  reduce 53
	'+'  reduce 53
	'-'  reduce 53
	'~'  reduce 53
	'('  reduce 53


250: shift/reduce conflict (shift 102, reduce 54) on ';'
state 250
	stmt : stmt . ';'  (46)
	for_stmt : FOR expr ';' ';' expr stmt .  (54)

	';'  shift 102
	$end  reduce 54
	BOOL  reduce 54
	CHAR  reduce 54
	INT  reduce 54
	FLOAT  reduce 54
	STRING  reduce 54
	IDENTIFIER  reduce 54
	NULLV  reduce 54
	IMPORT  reduce 54
	EXPORT  reduce 54
	GLOBAL  reduce 54
	FUNCTION  reduce 54
	TYPE  reduce 54
	METHOD  reduce 54
	CONSTRUCTOR  reduce 54
	DESTRUCTOR  reduce 54
	CONTINUE  reduce 54
	BREAK  reduce 54
	RETURN  reduce 54
	VAR  reduce 54
	TRY  reduce 54
	SIGNAL  reduce 54
	IF  reduce 54
	ELSE  reduce 54
	WHILE  reduce 54
	FOR  reduce 54
	WHEN  reduce 54
	NEW  reduce 54
	NOT  reduce 54
	'{'  reduce 54
	'}'  reduce 54
	'+'  reduce 54
	'-'  reduce 54
	'~'  reduce 54
	'('  reduce 54


251: shift/reduce conflict (shift 102, reduce 55) on ';'
state 251
	stmt : stmt . ';'  (46)
	for_stmt : FOR expr ';' expr ';' stmt .  (55)

	';'  shift 102
	$end  reduce 55
	BOOL  reduce 55
	CHAR  reduce 55
	INT  reduce 55
	FLOAT  reduce 55
	STRING  reduce 55
	IDENTIFIER  reduce 55
	NULLV  reduce 55
	IMPORT  reduce 55
	EXPORT  reduce 55
	GLOBAL  reduce 55
	FUNCTION  reduce 55
	TYPE  reduce 55
	METHOD  reduce 55
	CONSTRUCTOR  reduce 55
	DESTRUCTOR  reduce 55
	CONTINUE  reduce 55
	BREAK  reduce 55
	RETURN  reduce 55
	VAR  reduce 55
	TRY  reduce 55
	SIGNAL  reduce 55
	IF  reduce 55
	ELSE  reduce 55
	WHILE  reduce 55
	FOR  reduce 55
	WHEN  reduce 55
	NEW  reduce 55
	NOT  reduce 55
	'{'  reduce 55
	'}'  reduce 55
	'+'  reduce 55
	'-'  reduce 55
	'~'  reduce 55
	'('  reduce 55


252: shift/reduce conflict (shift 2, reduce 34) on BOOL
252: shift/reduce conflict (shift 3, reduce 34) on CHAR
252: shift/reduce conflict (shift 4, reduce 34) on INT
252: shift/reduce conflict (shift 5, reduce 34) on FLOAT
252: shift/reduce conflict (shift 6, reduce 34) on STRING
252: shift/reduce conflict (shift 7, reduce 34) on IDENTIFIER
252: shift/reduce conflict (shift 8, reduce 34) on NULLV
252: shift/reduce conflict (shift 17, reduce 34) on CONTINUE
252: shift/reduce conflict (shift 18, reduce 34) on BREAK
252: shift/reduce conflict (shift 19, reduce 34) on RETURN
252: shift/reduce conflict (shift 20, reduce 34) on VAR
252: shift/reduce conflict (shift 21, reduce 34) on TRY
252: shift/reduce conflict (shift 22, reduce 34) on SIGNAL
252: shift/reduce conflict (shift 23, reduce 34) on IF
252: shift/reduce conflict (shift 24, reduce 34) on WHILE
252: shift/reduce conflict (shift 25, reduce 34) on FOR
252: shift/reduce conflict (shift 26, reduce 34) on WHEN
252: shift/reduce conflict (shift 27, reduce 34) on NEW
252: shift/reduce conflict (shift 28, reduce 34) on NOT
252: shift/reduce conflict (shift 29, reduce 34) on '{'
252: shift/reduce conflict (shift 30, reduce 34) on '+'
252: shift/reduce conflict (shift 31, reduce 34) on '-'
252: shift/reduce conflict (shift 32, reduce 34) on '~'
252: shift/reduce conflict (shift 33, reduce 34) on '('
state 252
	stmt : expr .  (34)
	for_stmt : FOR expr ';' expr ';' expr . stmt  (52)
	assignment_stmt : expr . COPIES expr  (67)
	assignment_stmt : expr . REFS expr  (68)

	BOOL  shift 2
	CHAR  shift 3
	INT  shift 4
	FLOAT  shift 5
	STRING  shift 6
	IDENTIFIER  shift 7
	NULLV  shift 8
	CONTINUE  shift 17
	BREAK  shift 18
	RETURN  shift 19
	VAR  shift 20
	TRY  shift 21
	SIGNAL  shift 22
	IF  shift 23
	WHILE  shift 24
	FOR  shift 25
	WHEN  shift 26
	NEW  shift 27
	NOT  shift 28
	COPIES  shift 103
	REFS  shift 104
	'{'  shift 29
	'+'  shift 30
	'-'  shift 31
	'~'  shift 32
	'('  shift 33
	$end  reduce 34
	IMPORT  reduce 34
	EXPORT  reduce 34
	GLOBAL  reduce 34
	FUNCTION  reduce 34
	TYPE  reduce 34
	METHOD  reduce 34
	CONSTRUCTOR  reduce 34
	DESTRUCTOR  reduce 34
	ELSE  reduce 34
	'}'  reduce 34
	';'  reduce 34

	stmt  goto 263
	block_stmt  goto 43
	while_stmt  goto 44
	for_stmt  goto 45
	if_stmt  goto 46
	continue_stmt  goto 47
	break_stmt  goto 48
	return_stmt  goto 49
	assignment_stmt  goto 50
	try_catch_stmt  goto 51
	signal_stmt  goto 52
	var_stmt  goto 53
	expr  goto 54
	assignment  goto 55
	inline_if  goto 56
	new  goto 57
	logical_or  goto 58
	logical_and  goto 59
	bitwise_or  goto 60
	bitwise_xor  goto 61
	bitwise_and  goto 62
	equality  goto 63
	relational  goto 64
	sum  goto 65
	bitwise_shift  goto 66
	term  goto 67
	prefix_op  goto 68
	primary  goto 69
	elementary  goto 70
	literal  goto 71


state 253
	inline_if : WHEN new THEN new ELSE new .  (80)

	.  reduce 80


state 254
	type_stmt : TYPE IDENTIFIER '{' PUBLIC PRIVATE member_list '}' .  (25)

	.  reduce 25


state 255
	type_stmt : TYPE IDENTIFIER '{' PUBLIC member_list PRIVATE '}' .  (26)

	.  reduce 26


state 256
	type_stmt : TYPE IDENTIFIER '{' PUBLIC member_list PRIVATE member_list . '}'  (24)
	member_list : member_list . ',' member_item  (27)

	'}'  shift 264
	','  shift 243
	.  error


state 257
	member_list : member_list ',' member_item .  (27)

	.  reduce 27


state 258
	method_stmt : METHOD IDENTIFIER '(' parameter_list ')' OF IDENTIFIER . block_stmt  (31)

	'{'  shift 29
	.  error

	block_stmt  goto 265


state 259
	constructor_stmt : CONSTRUCTOR '(' parameter_list ')' OF IDENTIFIER block_stmt .  (32)

	.  reduce 32


state 260
	try_catch_stmt : TRY block_stmt CATCH '*' AS IDENTIFIER block_stmt .  (70)

	.  reduce 70


state 261
	catch_item : CATCH expr AS IDENTIFIER block_stmt .  (74)

	.  reduce 74


state 262
	try_catch_stmt : TRY block_stmt catch_item_list CATCH '*' AS IDENTIFIER . block_stmt  (69)

	'{'  shift 29
	.  error

	block_stmt  goto 266


263: shift/reduce conflict (shift 102, reduce 52) on ';'
state 263
	stmt : stmt . ';'  (46)
	for_stmt : FOR expr ';' expr ';' expr stmt .  (52)

	';'  shift 102
	$end  reduce 52
	BOOL  reduce 52
	CHAR  reduce 52
	INT  reduce 52
	FLOAT  reduce 52
	STRING  reduce 52
	IDENTIFIER  reduce 52
	NULLV  reduce 52
	IMPORT  reduce 52
	EXPORT  reduce 52
	GLOBAL  reduce 52
	FUNCTION  reduce 52
	TYPE  reduce 52
	METHOD  reduce 52
	CONSTRUCTOR  reduce 52
	DESTRUCTOR  reduce 52
	CONTINUE  reduce 52
	BREAK  reduce 52
	RETURN  reduce 52
	VAR  reduce 52
	TRY  reduce 52
	SIGNAL  reduce 52
	IF  reduce 52
	ELSE  reduce 52
	WHILE  reduce 52
	FOR  reduce 52
	WHEN  reduce 52
	NEW  reduce 52
	NOT  reduce 52
	'{'  reduce 52
	'}'  reduce 52
	'+'  reduce 52
	'-'  reduce 52
	'~'  reduce 52
	'('  reduce 52


state 264
	type_stmt : TYPE IDENTIFIER '{' PUBLIC member_list PRIVATE member_list '}' .  (24)

	.  reduce 24


state 265
	method_stmt : METHOD IDENTIFIER '(' parameter_list ')' OF IDENTIFIER block_stmt .  (31)

	.  reduce 31


state 266
	try_catch_stmt : TRY block_stmt catch_item_list CATCH '*' AS IDENTIFIER block_stmt .  (69)

	.  reduce 69


State 56 contains 1 shift/reduce conflict.
State 65 contains 2 shift/reduce conflicts.
State 69 contains 1 shift/reduce conflict.
State 93 contains 1 shift/reduce conflict.
State 148 contains 2 shift/reduce conflicts.
State 149 contains 1 shift/reduce conflict.
State 168 contains 2 shift/reduce conflicts.
State 169 contains 2 shift/reduce conflicts.
State 170 contains 2 shift/reduce conflicts.
State 171 contains 2 shift/reduce conflicts.
State 205 contains 1 shift/reduce conflict.
State 206 contains 24 shift/reduce conflicts.
State 229 contains 1 shift/reduce conflict.
State 230 contains 1 shift/reduce conflict.
State 231 contains 1 shift/reduce conflict.
State 232 contains 24 shift/reduce conflicts.
State 233 contains 1 shift/reduce conflict.
State 234 contains 24 shift/reduce conflicts.
State 249 contains 1 shift/reduce conflict.
State 250 contains 1 shift/reduce conflict.
State 251 contains 1 shift/reduce conflict.
State 252 contains 24 shift/reduce conflicts.
State 263 contains 1 shift/reduce conflict.


74 terminals, 50 nonterminals
135 grammar rules, 267 states

grammar parser grammar
symbol# value# symbol
     0      0  $end
     1    256  error
     2    257  BOOL
     3    258  CHAR
     4    259  INT
     5    260  FLOAT
     6    261  STRING
     7    262  IDENTIFIER
     8    263  MODULE_PATH
     9    264  NULLV
    10    265  IMPORT
    11    266  EXPORT
    12    267  GLOBAL
    13    268  FUNCTION
    14    269  TYPE
    15    270  METHOD
    16    271  CONSTRUCTOR
    17    272  DESTRUCTOR
    18    273  PUBLIC
    19    274  PRIVATE
    20    275  OF
    21    276  COPY
    22    277  REF
    23    278  PASS
    24    279  CONTINUE
    25    280  BREAK
    26    281  RETURN
    27    282  VAR
    28    283  TRY
    29    284  CATCH
    30    285  SIGNAL
    31    286  BECAUSE
    32    287  IF
    33    288  ELSE
    34    289  WHILE
    35    290  FOR
    36    291  WHEN
    37    292  THEN
    38    293  NEW
    39    294  OR
    40    295  AND
    41    296  NOT
    42    297  COPIES
    43    298  REFS
    44    299  AS
    45    300  LSHIFT
    46    301  RSHIFT
    47    302  EQ
    48    303  NE
    49    304  LE
    50    305  GE
    51    123  '{'
    52    125  '}'
    53     43  '+'
    54     45  '-'
    55     42  '*'
    56     47  '/'
    57     37  '%'
    58    126  '~'
    59     40  '('
    60     41  ')'
    61     44  ','
    62    306  "()"
    63     59  ';'
    64     61  '='
    65    124  '|'
    66     94  '^'
    67     38  '&'
    68     60  '<'
    69     62  '>'
    70     91  '['
    71     93  ']'
    72     46  '.'
    73     58  ':'
    74    307  $accept
    75    308  program
    76    309  import_stmt
    77    310  export_stmt
    78    311  export_item_list
    79    312  export_item
    80    313  global_variable_stmt
    81    314  function_stmt
    82    315  parameter_list
    83    316  parameter_item
    84    317  type_stmt
    85    318  member_list
    86    319  member_item
    87    320  method_stmt
    88    321  constructor_stmt
    89    322  destructor_stmt
    90    323  stmt
    91    324  block_stmt
    92    325  stmt_list
    93    326  while_stmt
    94    327  for_stmt
    95    328  if_stmt
    96    329  continue_stmt
    97    330  break_stmt
    98    331  return_stmt
    99    332  assignment_stmt
   100    333  try_catch_stmt
   101    334  catch_item_list
   102    335  catch_item
   103    336  signal_stmt
   104    337  var_stmt
   105    338  expr
   106    339  assignment
   107    340  inline_if
   108    341  new
   109    342  logical_or
   110    343  logical_and
   111    344  bitwise_or
   112    345  bitwise_xor
   113    346  bitwise_and
   114    347  equality
   115    348  relational
   116    349  sum
   117    350  bitwise_shift
   118    351  term
   119    352  prefix_op
   120    353  primary
   121    354  elementary
   122    355  literal
   123    356  expr_list
