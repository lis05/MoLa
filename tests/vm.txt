import a as a
import a.a.a as a
import "hello whatever noob" as a
import ^^^aa.a.a.aaaa.a as aa

export a as a, b as b, c as c
export f().z():k()[e](e, e, f, g, a+b*c/z) as d, C()()()()() as e

global a, b, c, d, e, f, g, h, j

function x() {}
function x() {
    a = a;
    a copies b;
    try {
        x = y;
        for ;; {}
    }
    catch 1 as f {}
}
function x(a, b, c, pass a, copy a, ref a, b, c, d) {
    a b c
}

type x {
    a, b, c, d, e, f, g(), a, a(), a, a()
}

method x(a, b, c, pass a, copy a, ref a, b, c, d) of x {
    a = a;
    a copies b;
    try {
        x = y;
        for ;; {}
    }
    catch 1 as f {}
}

constructor(a, b, c, pass a, copy a, ref a, b, c, d) of x {
    a = a;
    a copies b;
    try {
        x = y;
        for ;; {}
    }
    catch 1 as f {}
}

destructor of x {
    a = a;
    a copies b;
    try {
        x = y;
        for ;; {}
    }
    catch 1 as f {}
}

{}
{{}{{}{}}{{}}}
{
    a = a;
    a copies b;
    try {
        x = y;
        for ;; {}
    }
    catch 1 as f {}
}

a; b; c; {}; {};

for a; a; a b
for a; ; a b
for ; a; a b
for a; a; b
for a; ; b
for ; a; b
for ; ; a b
for ; ; b

if a b
if a b else c
if a b else if a b else if a b else c

continue;
while C {{{{{continue}}}}}

break
while B {break}

return x;

function f() {
    return x;
    return copy x
    return ref x
    return pass x
}

a copies b
a refs b

try {
    a = a;
    a copies b;
    try {
        x = y;
        for ;; {}
    }
    catch 1 as f {}
}
catch 1 as b {
    a = a;
    a copies b;
    try {
        x = y;
        for ;; {}
    }
    catch 1 as f {}
}
catch f():x()[d:d] as e {
    a = a;
    a copies b;
    try {
        x = y;
        for ;; {}
    }
    catch 1 as f {}
}
finally catch as e {
    print()
}

signal a because b

var x = y, z = d()[e]+f lshift x * p%q, f, d

a = b = c = d
when a then a else a
new a(b)
new a
a or a
a and aa
a | a
a ^ a
a & a
a == a
a != a
a < a
a > a
a <= a
a >= a
a + a
a - aa
a lshift a
a rshift a
a * a
a / a
a % a;
+ a;
- a;
not a;
~ a;
a(a).a:a[a]
(a(a).a:a[a])
null
true
false
'a'
'\n'
123
-12312312
123213.2131
12312e153
"hello world "
d12321_f
